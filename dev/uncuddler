#!/usr/bin/env perl

#------------------------------------------------------------------------------
# Project Name      - PerlProjects/dev/uncuddler
# Started On        - Sun 14 Mar 23:02:24 GMT 2021
# Last Change       - Mon 15 Mar 00:15:10 GMT 2021
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# My old Perl syntax always had cuddled statements, loops and subroutines, -
# which I now hate and avoid, because it hampers readability; I found this even
# back then, but I guess it sometimes just takes time before the Penny drops.
#
# This script is for uncuddiling those statements, loops, and definitions.
# Although I've intended for this script to be for TFL programs (my code, -
# basically), it could probably be used on your end, if needed.
#
# WARNING: Edits happen in-place, without prompting, and should be used on a
#          project you can undo, such as a tracked file within a Git repo'.
#
# Usage: uncuddler [FILE]
#------------------------------------------------------------------------------

use v5.22.1;
use strict;
use warnings;

open(my $FH, '+<', $ARGV[0]) or die("$!");
my @Data = <$FH>;

my @Lines;
my $Num = 0;
my $Uncuddled = 0;
my $Width = length(scalar(@Data));
foreach (@Data) {
	$Num++;

	my $DeTabbed = $_;
	if (/([[:space:]]*if|elsif|unless|while|until|foreach|do)(\(.*\))(\{.*)$/) {
		push(@Lines, "$1 $2 $3\n");
		$Uncuddled++;

		my $DeTabbed = "$1 $2 $3" =~ s/\t/    /gr;
		printf("\e[2;37m%#*d\e[0m  \e[91m%s\e[0m\n", $Width, $Num, $DeTabbed);
	} elsif (/([[:space:]]*sub) (.*[^\s])(\{.*)$/) {
		push(@Lines, "$1 $2 $3\n");
		$Uncuddled++;

		my $DeTabbed = "$1 $2 $3" =~ s/\t/    /gr;
		printf("\e[2;37m%#*d\e[0m  \e[91m%s\e[0m\n", $Width, $Num, $DeTabbed);
	} else {
		push(@Lines, $_);

		my $DeTabbed = $_ =~ s/\t/    /gr;
		printf("\e[2;37m%#*d\e[0m  %s", $Width, $Num, $DeTabbed);
	}
}

#seek($FH, 0, 0) or die("$!");
#truncate($FH, -s $ARGV[0]) or die("$!");
#map(print($FH "$_"), @Lines);
#close($FH);

print("\nUncuddled $Uncuddled statement(s), loop(s), and/or subroutine(s).\n")
