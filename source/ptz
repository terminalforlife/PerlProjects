#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/local/bin/ptz
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/ptz
# Started On        - Sat 18 May 21:21:35 BST 2019
# Last Change       - Mon 25 Apr 23:31:13 BST 2022
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Limited functionality compared to the shell version of ToZero.
#
# Features:
#
# N/A
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   perl (>= 5.26.1)
#------------------------------------------------------------------------------

use feature 'say';
use strict;
use warnings;
use Time::Piece;

use constant VERSION => '2022-04-25';
use constant PROGRAM => 'ptz';

sub Usage() {
	print(qq{Usage: ${\PROGRAM} [OPTS] [YYYY-MM-DD]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -C, --no-commas          - Omit commas from returned value.
	} =~ tr/\t//dr)
}

my $DoCommas = 1;

while (defined($ARGV[0])) {
	if ($ARGV[0] =~ /^(--help|-h)$/) {
		Usage(); exit 0
	} elsif ($ARGV[0] =~ '^(--version|-v)$') {
		say(VERSION); exit 0
	} elsif ($ARGV[0] =~ '^(--no-commas|-C)$') {
		$DoCommas = 0
	} elsif ($ARGV[0] =~ '^-') {
		die("Err: Incorrect argument(s) specified.\n")
	} else {
		last()
	}

	shift()
}

die("Err: Target date of YYYY-MM-DD is required.\n")
	unless @ARGV;

my $Target = shift();

#----------------------------------------Begin Gathering and Displaying Seconds

sub Commas($) {
	my $Nr = '';
	my $Count = 0;
	foreach (split('', reverse($_[0]))) {
		$Nr = $_ . $Nr;
		if ($Count++ == 2) {
			$Nr = ',' . $Nr;
			$Count = 0
		}
	}

	$Nr = substr($Nr, 1, length($Nr))
		if substr($Nr, 0, 1) eq ',';

	return($Nr)
}

die("Invalid target date")
	unless $Target =~ /^\d{4}-\d{2}-\d{2}$/a;

my $CurrentTime = localtime->epoch();
my $TargetTime = Time::Piece->strptime($Target, '%Y-%m-%d')->epoch();
my $Seconds = $TargetTime - $CurrentTime;

$DoCommas ? say(Commas($Seconds)) : say($Seconds)
