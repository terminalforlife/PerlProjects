#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/vignify
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/vignify
# Started On        - Sun 12 Jan 22:02:23 GMT 2020
# Last Change       - Thu 26 Nov 04:54:04 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Just a small script I wrote one night while messing around with the
# Image::Magick module. It will scale the image up to your current screen's
# resolution, and add a vignette effect, plus some other things.
#
# I plan to use this and some other things to make some cool backgrounds for
# videos I put up on my YouTube channel, Learn Linux.
#
# Dependencies:
#
#   perl (>= 5.26.1)
#------------------------------------------------------------------------------

use strict;
use warnings;
use autodie;
use Image::Magick; # <-- libimage-magick-perl (>= 8:6.8.9.9-7)
use X11::Protocol; # <-- libx11-protocol-perl (>= 0.56-7)

no warnings 'uninitialized';

my $CurVer = "2020-11-26";
my $Progrm = ($0 =~ m{(?:.*/)?([^/].*)})[0];

unless (@ARGV == 2 or @ARGV == 3){
	print("Usage: $Progrm [IN] [OUT] [COMPOSITE]\n"); exit(1)
}elsif (not -f -r $ARGV[0]){
	die('Input file missing or unreadable')
}elsif (not -d $ARGV[1] =~ m{([^./].*)(?:/.*)} || './'){
	die('Output path missing or unreadable')
}

my $Input = $ARGV[0];
my $Output = $ARGV[1];

sub GetRes {
	my $X11 = X11::Protocol->new();

	return([$X11->width_in_pixels(), $X11->height_in_pixels()]);
}

my $Image = Image::Magick->new();

$Image->Read($Input);

my ($Width, $Height) = $Image->Get('width', 'height');

$Image->Resize(
	'width' => GetRes()->[0],
	'height' => GetRes()->[1]
);

$Image->BlueShift(1.4);

$Image->Vignette(
	'background' => 'black', 'x' => 290,
	'y' => 270, 'geometry' => '300x300'
);

$Image->Display(':0');

sub YNInput {
	print("$_[0] [Y/N] ");
	my $Reply = <STDIN>;

	if ($Reply =~ '^([Nn]|[Nn][Oo])$'){
		return(0)
	}elsif (length($Reply) == 0 or $Reply !~ '^([Yy]|[Yy][Ee][Ss])$'){
		return(2)
	}else{
		return(1)
	}
}

if (YNInput('Save?')){
	$Image->Write($Output)
}else{
	unlink($Output) if -f $Output
}
