#!/usr/bin/env perl

#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/usersums
# Started On        - Mon 25 Jan 21:02:07 GMT 2021
# Last Change       - Tue  5 Apr 02:13:03 BST 2022
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Save a recursive list of all files and their MD5 hashes in HOME. The MD5 file
# format is the same as the standard md5sum(1) uses. The file is saved to HOME
# as '.md5sums', unless otherwise specified.
#
# Execution may take a few minutes.
#
# NOTE: Symlinks are not followed, and active mountpoints are ignored.
#
# Features:
#
# N/A
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   perl (>= 5.22.1-9)
#   perl-modules-5.26 (>= 5.26.1-6)
#------------------------------------------------------------------------------

require Digest::MD5;
require Encode;

use v5.10;
use strict;
use warnings;
use Digest::MD5 'md5_hex';

my $Target = $ENV{'HOME'};
my $Output = "$Target/.md5sums";
my $MountInfo = '/proc/self/mountinfo';

# These directories will be ignored.
my @Excludes = (
	"$Target/.cache",
	"$Target/.thumbnails"
);

#--------------------------------Gather List of Mountpoints to Avoid Traversing

# Convert octal sequences to regular characters.
# Alternatively: s/\\([[:digit:]]+)/chr(oct($1))/gre
sub Convert($) {
	my $Found = 0;
	my $Result = '';
	my $CurOctal = '';
	foreach my $Char (split('', $_[0])) {
		if ($Found) {
			unless ($Char =~ /^[[:digit:]]$/) {
				$Result = $Result . chr(oct($CurOctal));
				$Result = $Result . $Char;

				$CurOctal = '';
				$Found = 0
			} else {
				$CurOctal = $CurOctal . $Char;
			}
		} elsif ($Char eq '\\') {
			$Found = 1
		} else {
			$Result = $Result . $Char
		}
	}

	return($Result)
}

my @Mounts;
if (open(my $FH, '<', $MountInfo)) {
	while (<$FH>) {
		chomp(my $MountPoint = (split(' ', $_))[4]);
		push(@Mounts, Convert($MountPoint))
	}

	close($FH) or die("$!");
} else {
	die("$!");
}

#----------------------------------------------Recursively Gather List of Files

my @Files;
sub Recurse {
	if (opendir(my $DH, $_[0])) {
		foreach my $File (readdir($DH)) {
			next() if $File eq '.' or $File eq '..';

			push(@Files, "$_[0]/$File")
				if -f "$_[0]/$File";

			next() unless -d "$_[0]/$File";
			next() if grep(@Mounts);
			next() if grep({$_ eq $File} @Excludes);
			next() if -l "$_[0]/$File";

			Recurse("$_[0]/$File")
		}

		closedir($DH) or die("$!")
	} else {
		warn("$!: $_[0]\n")
	}
}

if (opendir(my $DH, $Target)) {
	foreach my $File (readdir($DH)) {
		next() if $File eq '.' or $File eq '..';

		push(@Files, "$Target/$File")
			if -f "$Target/$File";

		next() unless -d "$Target/$File";
		next() if grep(@Mounts);
		next() if grep({$_ eq $File} @Excludes);
		next() if -l "$Target/$File";

		Recurse("$Target/$File")
	}

	closedir($DH) or die("$!")
} else {
	die("$!: $Target\n")
}

#--------------------------------------------Begin Gathering & Savings MD5 Sums

open(my $SaveHandle, '>', $Output) or die("$!");

while (1) {
	print("Overwrite existing '$Output' file? [Y/N] ");

	chomp(my $Input = <STDIN>);

	if ($Input =~ '^([Yy]|[Yy][Ee][Ss])$') {
		my $MD5 = Digest::MD5->new();

		my $Hash;
		foreach (@Files) {
			if (open(my $HashHandle, '<', $_)) {
				$MD5->addfile($HashHandle);
				$Hash = $MD5->hexdigest();
				close($HashHandle) or die("$!")
			} else {
				warn("Cannot open '$_' for reading")
			}

			printf($SaveHandle "%s  %s\n", $Hash, $_);
		}

		close($SaveHandle) or die("$!");
		last()
	} elsif ($Input =~ '^([Nn]|[Nn][Oo])$') {
		print("Nothing to do -- quitting.\n");
		last()
	} else {
		print(STDERR "ERROR: Invalid response.\n")
	}
}
