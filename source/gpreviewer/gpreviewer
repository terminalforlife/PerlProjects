#!/usr/bin/perl
#cito M:755 O:0 G:0 T:/usr/bin/gpreviewer
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/gpreviewer/gpreviewer
# Started On        - Sun 25 Oct 01:10:22 BST 2020
# Last Change       - Wed 28 Oct 01:07:31 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Something I feel is much-needed is a GUI front-end to Previewer, using GTK2.
#
# Until database updating is added to the GUI, remember you can update it by
# using Previewer itself, like the `previewer --db-update` command.
#
# Features:
#
#TODO: Add basic help documentation. Use existing documentation tool?
#TODO: Font needs changing for Result because of no unicode characters. Tags?
#TODO: Make FindButton a little wider, without space-padding.
#TODO: Test GPreviewer on a non-tiling window manager, to ensure it looks OK.
#TODO: Update titlebar to 'GPreviewer - PKG_NAME', based on searched PKG.
#TODO: Add icon file for GPreviewer & add smaller version to titlebar.
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   libglib-perl (>= 3:1.326-1build1)
#   libgtk2-perl (>= 2:1.24992-1build1)
#   perl (>= 5.26.1)
#   previewer (>= 2020-01-09)
#------------------------------------------------------------------------------

use strict;
use warnings;
use autodie;
use Gtk2 '-init';
use Glib 'TRUE', 'FALSE';

my $Progrm = 'GPreviewer';
my $CurVer = '2020-10-28';
my $License = 'GNU General Public License v3.0';
my $LicenseURL = 'https://www.gnu.org/licenses/gpl-3.0.en.html';

my $AboutMe = "$Progrm ($CurVer)\n\nWritten in Perl, using Gtk2.\n\nAuthor: " .
	"terminalforlife (GitHub User)\nLicense: GNU General Public License v3.0" .
	"\nContact: terminalforlife\@yahoo.com";

# This is used to later determine (via signal) whether to use `-u` flag or not.
my $DoByUser = 'False';

my $UserName = '';

# About Dialog. I know there's a built-in solution, but I wanted my own.
sub AboutWin{
	my $AboutWin = Gtk2::Window->new();
		$AboutWin->signal_connect('destroy' => sub {$_[0]->destroy()});

		$AboutWin->set_position('center_always');
		$AboutWin->set_title($Progrm . ' (About)');
		$AboutWin->set_border_width(4);
		$AboutWin->set_default_size(310, 200);
		$AboutWin->set_size_request(310, 200);
		$AboutWin->set_resizable(FALSE);
		$AboutWin->set_decorated(TRUE);

	my $AboutVBox = Gtk2::VBox->new(FALSE, 4);
		$AboutVBox->set_border_width(8);

	my $AboutHBox = Gtk2::HBox->new(FALSE, 4);

	my $AboutLicenseLink = Gtk2::LinkButton->new($LicenseURL, 'License Details');

	my $AboutLabel = Gtk2::Label->new($AboutMe);
		$AboutLabel->set_single_line_mode(FALSE);
		$AboutLabel->set_line_wrap(TRUE);
		$AboutLabel->set_line_wrap_mode('word');
		$AboutLabel->set_justify('fill');

	my $AboutOKButton = Gtk2::Button->new_with_mnemonic('      _OK      ');
		$AboutOKButton->signal_connect('clicked' => sub {$AboutWin->destroy()});

	$AboutWin->add($AboutVBox);

	$AboutVBox->pack_start($AboutLabel, TRUE, FALSE, 4);
	$AboutVBox->pack_start($AboutHBox, TRUE, TRUE, 4);

	# Having the OK button in its own HBox ensures it's centered.
	$AboutHBox->pack_start($AboutOKButton, TRUE, FALSE, 4);
	$AboutHBox->pack_start($AboutLicenseLink, TRUE, FALSE, 4);

	$AboutWin->show_all()
}

# Example: ErrMsg($RootWin, 'Error message here.')
sub ErrMsg{
	my $ErrLabel = Gtk2::Label->new($_[1]);

	my $ErrWin = Gtk2::Dialog->new(
		"$Progrm (Error)", $_[0], 'destroy-with-parent', 'gtk-ok' => 'none'
	);

		$ErrWin->set_position('center_always');
		$ErrWin->set_title($Progrm . ' (Error)');
		$ErrWin->set_border_width(12);
		$ErrWin->set_default_size(300, 140);
		$ErrWin->set_size_request(300, 140);
		$ErrWin->set_resizable(FALSE);
		$ErrWin->set_decorated(TRUE);

	$ErrWin->get_content_area()->add($ErrLabel);

	# Close everything when OK is clicked or dialog closed.
	$ErrWin->signal_connect('response' => sub {Gtk2::main_quit()});

	$ErrWin->show_all()
}

sub UserFilter{
	my $UserWin = Gtk2::Window->new();
		$UserWin->signal_connect('destroy' => sub {$UserWin->destroy()});

		$UserWin->set_title($Progrm . ' (User Filter)');
		$UserWin->set_default_size(280, 170);
		$UserWin->set_size_request(280, 170);
		$UserWin->set_border_width(4);
		$UserWin->set_resizable(FALSE);
		$UserWin->set_decorated(TRUE);

	my $UserEntry = Gtk2::Entry->new();
		$UserEntry->set_text($UserName);

	# Using this to ensure correct padding within the frame.
	my $UserEntryHBox = Gtk2::HBox->new();
		$UserEntryHBox->set_border_width(8);

	my $UserWinAcceptButton = Gtk2::Button->new_with_mnemonic('_Accept');
		$UserWinAcceptButton->signal_connect(
			'clicked' => sub {
				$UserName = $UserEntry->get_text();
				$UserWin->destroy()
			}
		);

	my $UserWinCancelButton = Gtk2::Button->new_with_mnemonic('_Cancel');
		$UserWinCancelButton->signal_connect(
			'clicked' => sub {$UserWin->destroy()}
		);

	my $UserFrame = Gtk2::Frame->new('Username');
		$UserFrame->set_border_width(2);

	my $UserWinVBox = Gtk2::VBox->new(FALSE, 4);
		$UserWinVBox->set_border_width(8);

	my $UserWinHBox = Gtk2::HBox->new(FALSE, 4);
		$UserWinHBox->set_border_width(8);

	$UserFrame->add($UserEntryHBox);
		$UserFrame->set_border_width(8);

	$UserWin->add($UserWinVBox);

	$UserEntryHBox->pack_start($UserEntry, TRUE, TRUE, 4);

	$UserWinVBox->pack_start($UserFrame, TRUE, TRUE, 4);
	$UserWinVBox->pack_start($UserWinHBox, TRUE, TRUE, 4);

	$UserWinHBox->pack_start($UserWinAcceptButton, TRUE, TRUE, 4);
	$UserWinHBox->pack_start($UserWinCancelButton, TRUE, TRUE, 4);

	$UserWin->show_all()
}

sub MenuInit{
	my $MenuBar = Gtk2::MenuBar->new();
		$MenuBar->set_border_width(2);
		$MenuBar->set_pack_direction('ltr');

	# The Tools Item for the MenuBar.
	my $MenuItemTools = Gtk2::MenuItem->new('_Tools');
		$MenuItemTools->set_border_width(2);

	# The View Item for the MenuBar.
	#my $MenuItemView = Gtk2::MenuItem->new('_View');
		#$MenuItemView->set_border_width(2);

	# The right-justified Help Item for the MenuBar.
	my $MenuItemHelp = Gtk2::MenuItem->new('_Help');
		$MenuItemHelp->set_border_width(2);
		#$MenuItemHelp->set_right_justified(TRUE);

	# The submenus.
	my $MenuTools = Gtk2::Menu->new();
	#my $MenuView = Gtk2::Menu->new();
	my $MenuHelp = Gtk2::Menu->new();

	# A MenuItem for the Tools Menu.
	my $MenuItemUpdateDB = Gtk2::MenuItem->new('_Update Database');
		$MenuItemUpdateDB->signal_connect(
			'activate' => sub {system('previewer --db-update')}
		);

	# A MenuItem for the Help Menu.
	my $MenuItemAbout = Gtk2::MenuItem->new('_About...');
		$MenuItemAbout->signal_connect(
			'activate' => \&AboutWin
		);

	#TODO: This needs to open up a simple new Window in which to choose.
	my $MenuItemFilterUser = Gtk2::MenuItem->new('Filter _User...');
		$MenuItemFilterUser->signal_connect('activate' => \&UserFilter);

	# Add MenuItems (whether submenus or not) to MenuBar.
	#$MenuBar->append($MenuItemView);
	$MenuBar->append($MenuItemTools);
	$MenuBar->append($MenuItemHelp);

	# Set MenuItem* to use Menu* as a submenu.
	#$MenuItemView->set_submenu($MenuView);
	$MenuItemTools->set_submenu($MenuTools);
	$MenuItemHelp->set_submenu($MenuHelp);

	# Add MenuItems to the View submenu.
	#$MenuView->append();

	# Add MenuItems to the Tools submenu.
	$MenuTools->append($MenuItemFilterUser);
	$MenuTools->append(Gtk2::SeparatorMenuItem->new());
	$MenuTools->append($MenuItemUpdateDB);

	# Add MenuItems to the Help submenu.
	$MenuHelp->append($MenuItemAbout);

	# This is then used when later packing the VBox.
	return($MenuBar)
}

#-------------------------------------------------------------------Root Window

my $RootWin = Gtk2::Window->new('toplevel');
	$RootWin->signal_connect(destroy => sub {Gtk2::main_quit()});
	$RootWin->signal_connect(delete_event => sub {return(0)});

	$RootWin->set_title($Progrm);
	$RootWin->set_border_width(0);
	$RootWin->set_default_size(700, 800);
	$RootWin->set_size_request(700, 800);
	$RootWin->set_resizable(FALSE);
	$RootWin->set_decorated(TRUE);

#---------------------------------------------------------Top-Most Vertical Box

# RootWin contains VBoxTopMost and VBoxTopMost contains other boxes.
my $VBoxTopMost = Gtk2::VBox->new(FALSE, 0);

#-------------------------------------------------------------Main Vertical Box

# Both frames are packed into VBox.
my $VBox = Gtk2::VBox->new(FALSE, 4);
	$VBox->set_border_width(18); # <-- Appears as RootWin border, but not.

	my $Frame = Gtk2::Frame->new('Reviews');
		$Frame->set_border_width(2);

	my $SW = Gtk2::ScrolledWindow->new(undef, undef);
		$SW->set_shadow_type('etched-out');
		$SW->set_policy('automatic', 'automatic');
		$SW->set_size_request(670, 630);
		$SW->set_border_width(12);

	my $Buffer = Gtk2::TextBuffer->new();

	my $Result = Gtk2::TextView->new_with_buffer($Buffer);
		$Result->set_editable(FALSE);
		$Result->set_cursor_visible(FALSE);

#-----------------------------------------------------------Main Horizontal Box

my $HBoxMain = Gtk2::HBox->new(FALSE, 4);
	my $FrameQuery = Gtk2::Frame->new('Query');
	my $FrameRating = Gtk2::Frame->new('Rating');

#---------------------------------------------------------Rating Horizontal Box

my $HBoxRating = Gtk2::HBox->new(FALSE, 4);
	$HBoxRating->set_border_width(8);

	my $ComboBox = Gtk2::ComboBox->new_text();
		$ComboBox->insert_text($_ || 0, 'All Reviews');
		$ComboBox->insert_text($_, "$_-Star Reviews") foreach 1..5;

		# Have 'All Reviews' be the default selection.
		$ComboBox->set_active(0);

#----------------------------------------------------------Query Horizontal Box

my $HBoxQuery = Gtk2::HBox->new(FALSE, 4);
	$HBoxQuery->set_border_width(8);

	my $FindEntry = Gtk2::Entry->new();
		$FindEntry->signal_connect('activate' => \&UpdateResult, $FindEntry);

	my $FindButton = Gtk2::Button->new_with_mnemonic('    _Search    ');
		$FindButton->signal_connect('clicked' => \&UpdateResult, $FindEntry);

	# Callback for updating the Result TextView. As it is, this must be here.
	# Example: UpdateResult($FindEntry, $ComboBox, $Buffer)
	sub UpdateResult{
		my $Entry = $_[1];

		my $FindStr = $Entry->get_text();
		my $CurStar = (split('-', $ComboBox->get_active_text()))[0];

		my $AllStars = '';
		if ($CurStar eq 'All Reviews'){
			$AllStars = '-a';
			$CurStar = ''
		}

		my $UserOPT = '';
		if (length($UserName) > 0){
			$UserOPT = "-u '$UserName'"
		}

		my $NewResult = `previewer -b $UserOPT $AllStars "$FindStr" $CurStar`;

		$Buffer->set_text($NewResult)
	}

#------------------------------------------------------------------Begin Adding

$SW->add($Result);
$Frame->add($SW);

# This VBoxTopMost contains the menu and the main VBox. Took this approach in
# order to keep the MenuBar from being within the RootWin's border.
$RootWin->add($VBoxTopMost);

#-----------------------------------------------------------------Begin Packing

# Add the query and rating HBox-es to the two southern frames.
$FrameQuery->add($HBoxQuery);
$FrameRating->add($HBoxRating);

# Pack query-related widgets into HBoxQuery.
$HBoxQuery->pack_start($FindEntry, TRUE, TRUE, 4);
$HBoxQuery->pack_start($FindButton, FALSE, TRUE, 4);

# Pack rating ComboBox into HBoxRating.
$HBoxRating->pack_start($ComboBox, TRUE, TRUE, 4);

$VBoxTopMost->pack_start(MenuInit(), FALSE, FALSE, 0);
$VBoxTopMost->pack_start($VBox, TRUE, TRUE, 0);

# Pack the Menu, the Result frame, then the main HBox into VBox.
$VBox->pack_start($Frame, TRUE, TRUE, 4);
$VBox->pack_start($HBoxMain, TRUE, TRUE, 4);

# Now pack the two non-Result frames into HBoxMain.
$HBoxMain->pack_start($FrameQuery, TRUE, TRUE, 2);
$HBoxMain->pack_start($FrameRating, TRUE, TRUE, 2);

#-----------------------Show All Main Stuff, Do Main Loop, and Catch Big Errors

$RootWin->show_all();

ErrMsg($RootWin, "Dependency 'previewer' not found.")
	unless -x '/usr/bin/previewer';

Gtk2::main($Progrm)
