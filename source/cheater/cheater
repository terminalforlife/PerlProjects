#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/cheater
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/cheater/cheater
# Started On        - Sun 22 Nov 20:45:37 GMT 2020
# Last Change       - Sun 29 May 00:13:28 BST 2022
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# With the blessing from Igor Chubin, author of 'cheat.sh' and associated
# repositories, I've written an alternative interface to the plentiful source
# of information over at Chubin's GitHub repository 'cheat.sheets'.
#
# If you'd like to add to Cheater, you can do so while also helping 'cheat.sh'.
# Simply submit your 'cheat sheets' to the 'cheat.sheets' repository.
#
# I wanted to use GitHub's API and its handy JSON output, but of course they
# heavily restrict it.
#
# Features:
#
# N/A
#
# Bugs:
#
#TODO: Cannot find any sheet existing sheets on Linux Mint 18.3 with Cinnamon.
#
#      "Failed to access sheet 'CMD' data via GitHub..." Where CMD is the sheet
#      it can't find.
#
# Dependencies:
#
#   libwww-perl (>= 6.31-1)
#   perl (>= 5.26.1)
#   perl-modules-5.26 (>= 5.26.1-6)
#------------------------------------------------------------------------------

use feature 'say';
use strict;
use warnings;
use LWP::Simple;
use Term::ANSIColor 'color';

no warnings 'uninitialized';

use constant VERSION => '2022-05-29';
use constant PROGRAM => 'cheater';

sub Usage() {
	print(qq{Usage: ${\PROGRAM} [OPTS] [SHEET_1 [SHEET_2] ...]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -C, --no-colors          - Disable ANSI color escape sequences.
		  -H, --highlight REGEX    - Highlight REGEX in the requested sheet(s).
		  -P, --no-pager           - Do not use less(1) or more(1) for paging.
	} =~ tr/\t//dr)
}

use constant SHARE_DIR => '/usr/share/' . PROGRAM;
use constant EXCLUDE_FILE => SHARE_DIR . '/excluded_lines';
use constant RAW_URL => 'https://raw.githubusercontent.com/chubin/cheat.sheets/master/sheets';

my ($NoPager, $PagerFound, %Colors, @AvailFiles, $Highlight, $NoColors);

while (defined($ARGV[0])) {
	if ($ARGV[0] =~ '^(--help|-h)$') {
		Usage(); exit(0)
	} elsif ($ARGV[0] =~ '^(--version|-v)$') {
		say(VERSION); exit(0)
	} elsif ($ARGV[0] =~ '^(--no-color|-C)$') {
		$NoColors = 1
	} elsif ($ARGV[0] =~ '^(--no-pager|-P)$') {
		$NoPager = 1
	} elsif ($ARGV[0] =~ '^(--highlight|-H)$') {
		shift();

		unless (length($ARGV[0])) {
			die("Err: Missing REGEX.\n")
		} else {
			$Highlight = $ARGV[0]
		}
	} elsif ($ARGV[0] =~ '^-') {
		die("Err: Incorrect option(s) specified.\n")
	} else {
		last()
	}

	shift()
}

die("Err: Missing COMMAND to query.\n")
	unless scalar(@ARGV);

die("Err: Directory '${\SHARE_DIR}' missing.\n")
	unless -d SHARE_DIR;

%Colors = (
	'desc' => color('bright_black'),
	'match' => color('bright_red'),
	'reset' => color('reset')
) unless $NoColors;

# Check for less(1) and/or more(1) in PATH, if paging is enabled.
unless ($NoPager) {
	my @Executables;
	foreach my $Dir (split(':', $ENV{'PATH'})) {
		next() unless -d -r -x $Dir;

		foreach my $File (glob("$Dir/*")) {
			push(@Executables, $File =~ m{.*/(.*)$}) if -f -r -x $File
		}
	}

	# Set the pager which is found, using more(1) as a fallback.
	$PagerFound = 'more' if grep({$_ eq 'more'} @Executables);
	$PagerFound = 'less -R 2>&1' if grep({$_ eq 'less'} @Executables)
}

# If we have to use more(1), call `die()` if using colors; unsupported.
if ($PagerFound eq 'more' and not $NoColors) {
	die("Err: Color not supported in more(1).\n")
}

# We cannot use highlighting while disabling colors.
if (length($Highlight) and $NoColors) {
	die("Err: Highlighting unavailable while colors are disabled.\n")
}

#----------------------------------------------Populate List of Lines to Ignore

my @Excludes;
if (-f EXCLUDE_FILE) {
	die("Err: File '${\EXCLUDE_FILE}' unreadable.\n")
		unless -r EXCLUDE_FILE;

	open(my $FH, '<', EXCLUDE_FILE) or die("$!");

	while (<$FH>) {
		chomp();

		push(@Excludes, $_) unless (/^$/ or /^#/)
	}

	close($FH) or die("$!")
} else {
	die("Err: File '${\EXCLUDE_FILE}' missing.\n")
}

#----------------------------------------------------------Display the Sheet(s)

my ($ComStrip, @FinalLines);
foreach my $CurSheet (@ARGV) {
	my $HeaderSeen = 0;

	my $Response;
	if ($CurSheet =~ '/') {
		# Using one of the '_*' subdirectories.
		my ($Left, $Right) = split('/', $CurSheet);
		$Response = get(RAW_URL . "/_$Left/$Right")
	} else {
		$Response = get(RAW_URL . "/$CurSheet")
	}

	if (length($Response)) {
		foreach my $Line (split("\n", $Response)) {
			# This is of no consequence to us, as we're working differently.
			# This is a special line talked about between Chubin and
			# contributors, such as myself, which would contain parameters much
			# like Vim's modeline.
			next() if $Line =~ /^# cheat.sh: /;

			# Ignore the first 'block' of comments, since we already know what
			# we chose. The short description would be nice to include, but
			# right now the database isn't ready for such an assumption.
			if ($HeaderSeen) {
				if ($Line =~ /^# /) {
					unless ($NoColors) {
						$ComStrip = $Line =~ s/^#\s*//r
					} else {
						# Using this same variable just because I'm being lazy.
						$ComStrip = $Line
					}

					# Some lines have to be ignored by Cheater, because they
					# aren't relevant to the way we're using the sheets.
					next() if grep({$Line =~ /$_/} @Excludes);

					# One here...
					if (length($Highlight) and $Line =~ /$Highlight/) {
						my $Replace = "$Colors{match}$&$Colors{desc}";
						$ComStrip = $ComStrip =~ s/$&/$Replace/rg
					}

					push(@FinalLines, "$Colors{desc}$ComStrip$Colors{reset}\n")
				} elsif ($Line =~ /^#$/) {
					unless ($NoColors) {
						push(@FinalLines, "\n")
					} else {
						# Otherwise it might be a bit confusing.
						push(@FinalLines, "#\n")
					}
				} else {
					my $ElseLine = $Line;

					# ...and one here, to ensure we restore the right color.
					if (length($Highlight) and $ElseLine =~ /$Highlight/) {
						my $Replace = "$Colors{match}$&$Colors{reset}";
						$ElseLine = $ElseLine =~ s/$&/$Replace/rg
					}

					push(@FinalLines, "$ElseLine\n")
				}
			} else {
				if ($Line =~ /^# /) {
					next()
				} elsif ($Line =~ /^$/) {
					$HeaderSeen = 1
				}
			}
		}

		# Ensures a newline between sheets.
		push(@FinalLines, "\n") if scalar(@ARGV)
	} else {
		die("Err: Failed to access sheet '$CurSheet' data via GitHub.\n")
	}
}

#------------------------------------Begin Displaying Lines & Remove Duplicates

unless ($NoPager) {
	open(my $PH, "| $PagerFound") or die("$!");

	my $OldLine;
	foreach my $NewLine (@FinalLines) {
		print($PH $NewLine) if $NewLine ne $OldLine;
		$OldLine = $NewLine
	}

	close($PH) or die("$!")
} else {
	my $OldLine;
	foreach my $NewLine (@FinalLines) {
		print($NewLine) if $NewLine ne $OldLine;
		$OldLine = $NewLine
	}
}
