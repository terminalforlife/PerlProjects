#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/local/bin/dl-usage-logger
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/dl-usage-logger/dl-usage-logger
# Started On        - Tue 15 Mar 01:58:14 GMT 2022
# Last Change       - Tue 25 Jul 22:46:13 BST 2023
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Log download usage. Written for this thread:
#
#   https://forums.linuxmint.com/viewtopic.php?f=47&t=369915
#
# CAUTION: Consider this as somewhat experimental!
#
# To install for global use:
#
#   $ sudo install -o 0 -g 0 -m 755 dl-usage-logger /usr/local/bin
#   $ sudo install -o 0 -g 0 -m 644 dlul.service /etc/systemd/system
#
# Be sure to install the service/unit file, edit the file if needed, then
# enable and start the service. This way, this script will automatically
# execute when you shut the system down. This is admittedly not a perfect
# solution, but it may suffice. There is some commented code if you want to try
# a 24/7 server approach.
#
# This is pretty portable, requiring only standard PERL stuff.
#
# The log file used is '~/.dl-usage.log' but by all means change it to whatever
# you want. I may eventually overhaul and rename this script and turn it into
# an actual program, rather than a quick script, likely in Python.
#
# To view the log file with human-readable sizes, you can run:
#
#   $ numfmt --field=2 --to=iec < ~/.dl-usage.log
#
# However, the sizes are always in bytes. I'd love for this to be in
# human-readable sizes, but that adds a LOT of complexity simply because of the
# arithmetic and figuring out what the new value should be, each time.
#
# USAGE: dl-usage-logger UID IFACE
#
# Dependencies:
#
#   perl (>= 5.10)
#------------------------------------------------------------------------------

use feature 'say';
use strict;
use warnings;
use Date::Format 'strftime';

no warnings 'uninitialized';

if ($ARGV[0] !~ /^[[:digit:]]+$/ or not defined($ARGV[1])) {
	say("Usage: dl-usage-logger UID IFACE.");
	exit(1)
}

my $LogFile = (getpwuid($ARGV[0]))[7] . '/.dl-usage.log';
my $NetFile = '/proc/net/dev';
my $Interface = $ARGV[1];
my $Divisor = 1024;

sub GetBytes() {
	if (open(my $FH, '<', $NetFile)) {
		while (<$FH>) {
			my @Data = split();
			if ($Data[0] eq $Interface . ':') {
				return($Data[1])
			}
		}

		close($FH) or die("$!")
	} else {
		die("$!")
	}
}

# Create file if not found. Won't work if the file exists but is for some
# reason empty -- yet another reason not to mess around with the file.
unless (-f $LogFile) {
	if (open(my $FH, '>', $LogFile)) {
		close($FH) or die("$!")
	} else {
		die("$!")
	}
}

# Update log file.
my $Date = strftime("%Y-%m-%d", @{[localtime()]});
if (open(my $FH, '+<', $LogFile)) {
	my @Output;
	my $Found = 0;
	while (<$FH>) {
		chomp(my @Line = split());
		if ($Line[0] eq $Date) {
			$Found = 1;

			# This is (kind of) appropriate if you use Cron on a 24/7 server.
			# Keep in mind this will be utterly useless if you start a new
			# session. To solve this, I'd use unique session IDs (not UIDs), -
			# but I don't know if Linux even has that.
			#my $Diff = GetBytes() - $Line[1];
			#my $NewSize = $Line[1] + $Diff;

			# This is appropriate for running at system shut down. If you use
			# the above method, be sure to comment this one out.
			my $NewSize = $Line[1] + GetBytes();

			push(@Output, "$Line[0]  $NewSize")
		} else {
			push(@Output, "$Line[0]  $Line[1]")
		}
	}

	# New date entry to append to the file, if it wasn't found already.
	push(@Output, $Date . '  ' . GetBytes()) unless $Found;

	seek($FH, 0, 0) or die("$!");
	say($FH $_) foreach @Output;

	close($FH) or die("$!")
} else {
	die("$!")
}
