#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/lsbins
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/lsbins
# Started On        - Thu 25 Apr 14:17:05 BST 2019
# Last Change       - Wed 10 Mar 21:51:33 GMT 2021
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Features:
#
# N/A
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   perl (>= 5.22.1-9)
#------------------------------------------------------------------------------

use v5.22.1;
use strict;
use warnings;
use autodie;

no warnings 'uninitialized';

my $CurVer = '2021-03-10';
my $Progrm = 'lsbins';

sub Usage {
	print(qq{Usage: $Progrm [OPTS] [MATCH]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -E, --extended-regexp    - Search with extended REGEX.
		  -N, --nodescribe         - Omit the short description.
		  -a, --show-all           - Show alternative descriptions.
		  -i, --ignore-case        - Search case-insensitively.
	} =~ tr/\t//dr)
}

my $CaseInsen = 0;
my $ExtReg = 0;
my $NoDescribe = 0;
my $ShowAll = 0;

my ($FlagExtReg, $FlagCaseInsen);
while (defined($ARGV[0])) {
	if ($ARGV[0] =~ '^(--help|-h|-\?)$') {
		Usage(); exit(0)
	} elsif ($ARGV[0] =~ '^(--version|-v)$') {
		print("$CurVer\n"); exit(0)
	} elsif ($ARGV[0] =~ '^(--ignore-case|-i)$') {
		$FlagCaseInsen = $ARGV[0];
		$CaseInsen = 1
	} elsif ($ARGV[0] =~ '^(--extended-regexp|-E)$') {
		$FlagExtReg = $ARGV[0];
		$ExtReg = 1
	} elsif ($ARGV[0] =~ '^(--nodescribe|-N)$') {
		$NoDescribe = 1
	} elsif ($ARGV[0] =~ '^(--show-all|-a)$') {
		$ShowAll = 1
	} elsif ($ARGV[0] =~ '^-.*') {
		die("Unrecognised option(s) specified")
	} else {
		last
	}

	shift()
}

scalar(@ARGV) > 1 and die('Only one MATCH is applicable');

unless (defined($ARGV[0])) {
	if ($ExtReg) {
		die("OPT '$FlagExtReg' provided, but missing MATCH")
	} elsif ($CaseInsen) {
		die("OPT '$FlagCaseInsen' provided, but missing MATCH")
	}
}

my (@ExeArray, %ExeHash);
foreach my $Dir (split(':', $ENV{PATH})) {
	-d $Dir or next;

	opendir(my $DH, $Dir);

	foreach my $File (readdir($DH)) {
		-f -r -x "$Dir/$File" or next;

		# Push only the unique files' basename into the array.
		my $BaseName = ($File =~ m{(?:.*/)?([^/].*)})[0];
		unless ($ExeHash{$BaseName} == 1) {
			push(@ExeArray, $BaseName);
			$ExeHash{$BaseName} = 1
		}
	}

	closedir($DH)
}

@ExeArray = sort({$a cmp $b} @ExeArray);

# Usage: DoMatch(<NAME>)
sub DoMatch($) {
	defined($ARGV[0]) or return(1);

	# If a MATCH is provided, check for it, then skip if found.
	if ($CaseInsen) {
		$_[0] =~ /$ARGV[0]/i and return(1)
	} elsif ($ExtReg) {
		$_[0] =~ /$ARGV[0]/x and return(1)
	} elsif ($CaseInsen and $ExtReg) {
		$_[0] =~ /$ARGV[0]/ix and return(1)
	} else {
		$_[0] =~ $ARGV[0] and return(1)
	}

	return(0)
}

my $FoundMan = 0;
foreach my $Dir (split(':', $ENV{'PATH'})) {
	-d -r -x $Dir or next;

	foreach my $File (glob("$Dir/*")) {
		-f -r -x $File or next;

		my $Base = ($File =~ m{(?:.*/)([^/].*)})[0];
		if ($Base eq 'man') {
			$FoundMan = 1;
			last
		}
	}

	$FoundMan and last
}

if (not $NoDescribe and $FoundMan){
	my $OldName = '';
	foreach (`man -f @ExeArray 2> /dev/null`) {
		chomp();
		my $Name = (split(' ', $_))[0];

		# Using `OldName` to avoid alternative descriptions.
		if ($Name eq $OldName and not $ShowAll) { next }

		# Capitalise the first letter of the description.
		my $Desc = ' - ' . ucfirst(s/^.* - //gr);

		DoMatch($Name) or next;
		printf("%s%s\n", $Name, $Desc);

		$OldName = $Name
	}
}else{
	foreach (@ExeArray){
		DoMatch($_) or next;
		printf("%s\n", $_)
	}
}
