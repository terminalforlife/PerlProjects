#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/lsbins
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/lsbins/lsbins
# Started On        - Thu 25 Apr 14:17:05 BST 2019
# Last Change       - Wed 13 Apr 18:10:03 BST 2022
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Features:
#
# N/A
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   perl (>= 5.26.1)
#------------------------------------------------------------------------------

use feature 'say';
use strict;
use warnings;

no warnings 'uninitialized';

use constant VERSION => '2022-04-13';
use constant PROGRAM => 'lsbins';

sub Usage() {
	print(qq{Usage: ${\PROGRAM} [OPTS] [MATCH]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -C, --no-color           - Disable ANSI color escape sequences.
		  -D, --no-describe        - Omit the short description.
		  -i, --ignore-case        - Search case-insensitively.
		  -n, --name-only          - Match only the executable names.
	} =~ tr/\t//dr)
}

my $CaseInsen = 0;
my $NoDescribe = 0;
my $NameOnly = 0;

my $C_Grey = "\e[37m";
my $C_DimGrey = "\e[2;37m";
my $C_Reset = "\e[0m";

my $FlagCaseInsen;
while (defined($ARGV[0])) {
	if ($ARGV[0] =~ '^(--help|-h)$') {
		Usage(); exit(0)
	} elsif ($ARGV[0] =~ '^(--version|-v)$') {
		say(VERSION); exit(0)
	} elsif ($ARGV[0] =~ '^(--no-color|-C)$') {
		$C_Grey = '';
		$C_DimGrey = '';
		$C_Reset = ''
	} elsif ($ARGV[0] =~ '^(--ignore-case|-i)$') {
		$FlagCaseInsen = $ARGV[0];
		$CaseInsen = 1
	} elsif ($ARGV[0] =~ '^(--no-describe|-D)$') {
		$NoDescribe = 1
	} elsif ($ARGV[0] =~ '^(--name-only|-n)$') {
		$NameOnly = 1
	} elsif ($ARGV[0] =~ '^-.*') {
		die("Err: Unrecognised option(s) specified.\n")
	} else {
		last()
	}

	shift()
}

die("Err: Only one MATCH is applicable.\n") if @ARGV > 1;

my (%Execs, $FoundMan);
foreach my $Dir (split(':', $ENV{PATH})) {
	next() unless -d $Dir;

	if (opendir(my $DH, $Dir)) {
		foreach my $File (readdir($DH)) {
			next() unless -f -r -x "$Dir/$File";

			my $Basename = ($File =~ m{(?:.*/)?([^/].*)})[0];

			$FoundMan = 1 if $Basename eq 'man';

			# Add the basename of the file path. Only need key, for uniques.
			$Execs{$Basename} = undef()
		}

		closedir($DH) or die("$!")
	} else {
		warn("$!")
	}
}

my @Sorted = sort({$a cmp $b} keys(%Execs));

# Usage: DoMatch(<NAME>)
sub DoMatch($) {
	defined($ARGV[0]) or return(1);

	# If a MATCH is provided, check for it, then skip if found.
	if ($CaseInsen) {
		$_[0] =~ /$ARGV[0]/i and return(1)
	} else {
		$_[0] =~ $ARGV[0] and return(1)
	}

	return(0)
}

if (not $NoDescribe and $FoundMan) {
	foreach (`man -f @Sorted 2> /dev/null`) {
		chomp(my @Line = split());

		my $MatchName = $Line[0] . $Line[1];
		my $Desc = ' - ' . ucfirst(join(' ', @Line[3..@Line]));

		my $MatchStr = $MatchName . $Desc;
		$MatchStr = $MatchName if $NameOnly;

		next() unless DoMatch($MatchStr);

		say("$Line[0]$C_DimGrey$Line[1]$C_Reset$C_Grey$Desc$C_Reset")
	}
} else {
	foreach (@Sorted){
		say() if DoMatch($_)
	}
}
