#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/redshifter
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/redshifter
# Started On        - Fri 19 Apr 23:05:28 BST 2019
# Last Change       - Mon 11 Apr 01:13:15 BST 2022
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Dependencies:
#
#   perl (>= 5.22.1-9)
#   redshift (>= 1.10-5)
#------------------------------------------------------------------------------

use feature 'say';
use strict;
use warnings;

no warnings 'uninitialized';

use constant VERSION => '2022-04-11';
use constant PROGRAM => 'redshifter';

sub Usage() {
	print(qq{Usage: ${\PROGRAM} [OPTS] ACTION

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -f, --file PATH          - Use PATH instead of the default.

		  lower N                  - Lower the current gamma by N.
		  raise N                  - Raise the current gamma by N.
		  reset                    - Reset to the default of 6500.
		  set N                    - Manually set the gamma to N.
		  show                     - Print the current temperature.

		  Valid temperatures are between 1000K (warm) and 25000K (cool).
	} =~ tr/\t//dr)
}

my $Buffer = "$ENV{HOME}/.config/rs-gamma";
my $ConfigDir = ($Buffer =~ m{(.*)?(?:/.*)})[0];

die("Err: Argument(s) required.\n") unless @ARGV;

my ($Temp, $GammasNow);
while (defined($ARGV[0])) {
	if ($ARGV[0] =~ '^(--help|-h)$') {
		Usage(); exit(0)
	} elsif ($ARGV[0] =~ '^(--version|-v)$') {
		say(VERSION); exit(0)
	} elsif ($ARGV[0] =~ '^(--file|-f)$') {
		shift();

		die("Err: Option '--file|-f' given a directory.\n")
			if -d $ARGV[0];

		$Buffer = $ARGV[0]
	} elsif ($ARGV[0] =~ '^-') {
		die("Err: Incorrect option(s) specified.\n")
	} else {
		last()
	}

	shift()
}

my @Bins;
foreach my $Dir (split(':', $ENV{PATH})) {
	next() unless -d -x $Dir;

	opendir(my $DH, $Dir) or die("$!");
	push(@Bins, readdir($DH));
	closedir($DH) or die("$!")
}

die("Err: Dependency 'redshift' not found.\n")
	unless grep({$_ eq 'redshift'} @Bins);

# Usage: GetSetValue([<|>], [GAMMA_INT])
sub GetSetValue($;$) {
	if (-f $Buffer) {
		die("Err: File '$Buffer' lacks read access.\n")
			unless -r $Buffer;

		die("Err: File '$Buffer' lacks write access.\n")
			unless -w $Buffer;
	}

	open(my $FH, $_[0], $Buffer) or die("$!");

	say($FH $_[1]) if $_[0] eq '>';
	chomp($GammasNow = <$FH>) if $_[0] eq '<';

	close($FH) or die("$!")
}

# Usage: ChkVal([ACTION], [VALUE])
sub ChkVal($;$) {
	die("Err: Action '$_[0]' needs an integer.\n")
		unless $_[1] =~ /^\d+$/a;

	if ($_[0] eq 'raise') {
		$Temp = $GammasNow + $_[1];
		if ($Temp > 25000) {
			$Temp = 25000;
			warn("Err: Maximum gamma available is 25000.\n")
		}
	} elsif ($_[0] eq 'lower') {
		$Temp = $GammasNow - $_[1];
		if ($Temp < 1000) {
			$Temp = 1000;
			warn("Err: Minimum gamma available is 1000.\n")
		}
	}
}

# Just in-case the user doesn't yet have a `.config` directory.
mkdir($ConfigDir) unless -d $ConfigDir;

-f $Buffer ? GetSetValue('<') : GetSetValue('>', 6500);

# Parse ACTIONS.
while (defined($ARGV[0])) {
	if ($ARGV[0] eq 'set') {
		shift();

		ChkVal('set', $ARGV[0]);
		GetSetValue('>', $ARGV[0]);

		system("redshift -o -O $ARGV[0]K 1> /dev/null")
	} elsif ($ARGV[0] eq 'reset') {
		GetSetValue('>', '6500');

		system('redshift -o -O 6500K 1> /dev/null')
	} elsif ($ARGV[0] eq 'raise') {
		shift();

		ChkVal('raise', $ARGV[0]);
		GetSetValue('>', $Temp);

		system("redshift -o -O ${Temp}K 1> /dev/null")
	} elsif ($ARGV[0] eq 'lower') {
		shift();

		ChkVal('lower', $ARGV[0]);
		GetSetValue('>', $Temp);

		system("redshift -o -O ${Temp}K 1> /dev/null")
	} elsif ($ARGV[0] eq 'show') {
		print("$GammasNow\n")
	} else {
		die("Err: Incorrect action(s) specified.\n")
	}

	shift()
}
