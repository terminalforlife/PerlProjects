#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/suptime
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/suptime
# Started On        - Wed 17 Apr 13:13:34 BST 2019
# Last Change       - Fri 15 Apr 21:12:11 BST 2022
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# A Perl rewrite of `up()` previously found in BashConfig's '.bash_functions'.
#
# Features:
#
# N/A
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   perl (>= 5.26.1)
#------------------------------------------------------------------------------

use feature 'say';
use strict;
use warnings;

no warnings 'uninitialized';

use constant VERSION => '2022-04-15';
use constant PROGRAM => 'suptime';

sub Usage() {
	print(qq{Usage: ${\PROGRAM} [OPTS]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.

		  If multiple formats are chosen, only the last one applies.
	} =~ tr/\t//dr)
}

use constant FILE => '/proc/uptime';

while (defined($ARGV[0])) {
	if ($ARGV[0] =~ '^(--help|-h)$') {
		Usage(); exit(0)
	} elsif ($ARGV[0] =~ '^(--version|-v)$') {
		say(VERSION); exit(0)
	} else {
		die("Err: Incorrect option(s) specified.\n")
	}

	shift()
}

open(my $FH, '<', FILE) or die("$!");
my @Array = split(' ', <$FH>);
close($FH) or die("$!");

my $Hour = int($Array[0] / 60 / 60);
my $Min = int($Array[0] / 60 - ($Hour * 60));

# Use correct grammar.
my $Hour_S = 's' if $Hour > 1 or not $Hour;
my $Min_S = 's' if $Min > 1 or not $Min;

say("$Hour hour$Hour_S and $Min minute$Min_S")
