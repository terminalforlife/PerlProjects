#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/local/bin/kernelchk
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/kernelchk
# Started On        - Sun  5 May 13:15:29 BST 2019
# Last Change       - Mon 11 Apr 01:52:14 BST 2022
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Simpler Perl rewrite of the old shell kernelchk program also by TFL. This
# just checks for a kernel change, notifying the user accordingly. It might be
# handy if you're paranoid about security, but it's usefulness is arguable.
#
# Dependencies:
#
#    libgtk2-notify-perl (>= 0.05-4build2)
#    perl (>= 5.10)
#------------------------------------------------------------------------------

use feature 'say';
use strict;
use warnings;
use Gtk2::Notify -init, 'kernelchk';

no warnings 'uninitialized';

use constant VERSION => '2022-04-11';
use constant PROGRAM => 'kernelchk';

sub Usage() {
	print(qq{Usage: ${\PROGRAM} [OPTS]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -N, --notify             - Send notification on mis-match.
		  -q, --quiet              - Hush, if versions don't match.
		  -s, --set                - Save the current kernel version.

		  If versions don't match, give an exit status of 2.

		  With a simple '-q' flag and then testing this program's exit
		  status, a mis-match can be very easily handled by the user.
	} =~ tr/\t//dr)
}

use constant PROC_FILE => '/proc/version';
use constant MAIN_DIR => "$ENV{HOME}/.config/" . PROGRAM;
use constant SAVED_FILE => MAIN_DIR . '/saved';

my ($Notify, $BeQuiet, $Set);

while ($ARGV[0]) {
	if ($ARGV[0] =~ /^(--help|-h)$/) {
		Usage(); exit(0)
	} elsif($ARGV[0] =~ /^(--version|-v)$/) {
		say(VERSION); exit(0)
	} elsif($ARGV[0] =~ /^(--quiet|-q)$/) {
		$BeQuiet = 1
	} elsif($ARGV[0] =~ /^(--notify|-N)$/) {
		$Notify = 1
	} elsif($ARGV[0] =~ /^(--set|-s)$/) {
		$Set = 1
	} else {
		die("Err: Incorrect argument(s) specified.\n")
	}

	shift()
}

sub CheckFile($) {
	die("Err: File '$_[0]' not found.\n") unless -f $_[0];
	die("Err: Read access to '$_[0]' denied.\n") unless -r $_[0]
}

mkdir(MAIN_DIR) unless -d MAIN_DIR;

# Get current version.
CheckFile(PROC_FILE);
open(my $FH, '<', PROC_FILE) or die("$!");
my $Current = @{[split(' ', <$FH>)]}[2];
close($FH) or die("$!");

if ($Set eq 'true') {
	open(my $FH, '>', SAVED_FILE) or die("$!");
	print($FH $Current);
	close($FH) or die("$!");

	exit(0)
}

# Get saved version.
CheckFile(SAVED_FILE);
open($FH, '<', SAVED_FILE) or die("$!");
chomp(my $Saved = <$FH>);
close($FH) or die("$!");

printf("%-14s%-s\n%-14s%-s\n", 'CURRENT:', $Current, 'SAVED:', $Saved)
	unless $BeQuiet;

exit(0) if $Current eq $Saved;

if ($Notify) {
	my $Text = 'Kernel version mis-match detected.';
	my $Notify = Gtk2::Notify->new($Text);
	$Notify->set_urgency('critical');
	$Notify->show()
}

exit(2)
