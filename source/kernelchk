#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/kernelchk
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/kernelchk
# Started On        - Sun  5 May 13:15:29 BST 2019
# Last Change       - Fri 13 Nov 15:17:39 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Simpler Perl rewrite of the old shell kernelchk program also by TFL.
#
# Dependencies:
#
#    libgtk2-notify-perl (>= 0.05-4build2)
#------------------------------------------------------------------------------

use strict;
use warnings;
use autodie;
use Gtk2::Notify -init, 'kernelchk';

no warnings 'uninitialized';

my $CurVer = "2020-11-13";
my $Progrm = 'kernelchk';

my $ProcFile = '/proc/version';

sub Usage {
	print(qq{Usage: $Progrm [OPTS]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -N, --notify             - Send notification on mis-match.
		  -q, --quiet              - Hush, if versions don't match.
		  -s, --set                - Save the current kernel version.

		  If versions don't match, give an exit status of 2.

		  With a simple '-q' flag and then testing this program's exit
		  status, a mis-match can be very easily handled by the user.
	} =~ tr/\t//dr)
}

my ($Notify, $BeQuiet, $Set);

while ($ARGV[0]) {
	if ($ARGV[0] =~ /^(--help|-h|-\?)$/) {
		Usage; exit(0)
	} elsif($ARGV[0] =~ /^(--version|-v)$/) {
		print("$CurVer\n"); exit(0)
	} elsif($ARGV[0] =~ /^(--quiet|-q)$/) {
		$BeQuiet = 'true'
	} elsif($ARGV[0] =~ /^(--notify|-N)$/) {
		$Notify = 'true'
	} elsif($ARGV[0] =~ /^(--set|-s)$/) {
		$Set = 'true'
	} else {
		die("Incorrect argument(s) specified")
	}

	shift(@ARGV)
}

sub CheckFile {
	-f $_[0] or die("File '$_[0]' not found");
	-r $_[0] or die("Read access to '$_[0]' denied")
}

my $MainDir = "$ENV{HOME}/.config/$Progrm";
-d $MainDir or mkdir($MainDir);

my $SavedFile = "$MainDir/saved";

# Get current version.
CheckFile($ProcFile);
open(my $FH, '<', $ProcFile);
my $Current = @{[split(' ', <$FH>)]}[2];
close($FH);

if ($Set eq 'true') {
	open(my $FH, '>', $SavedFile);
	print($FH $Current);
	close($FH);

	exit(0)
}

# Get saved version.
CheckFile($SavedFile);
open($FH, '<', $SavedFile);
chomp(my $Saved = <$FH>);
close($FH);

printf("%-14s%-s\n%-14s%-s\n", 'CURRENT:', $Current, 'SAVED:', $Saved)
	unless $BeQuiet eq 'true';

exit(0) if $Current eq $Saved;

if ($Notify) {
	my $Text = 'Kernel version mis-match detected.';
	my $Notify = Gtk2::Notify->new($Text);
	$Notify->set_urgency('critical');
	$Notify->show()
}

exit(2)
