#!/usr/bin/perl
#cito M:755 O:0 G:0 T:/usr/local/bin/janein
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/janein
# Started On        - Wed 28 Oct 17:26:51 GMT 2020
# Last Change       - Wed 13 Apr 17:09:47 BST 2022
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Programmable Yes/No GTK2 dialog for use in scripts.
#
# Test Results:
#
#   Linux Mint 18.3 (Cinnamon)             | PERFECT
#   Pop! OS 20.04 (GNOME3)                 | BAD
#   Ubuntu 18.04 (i3-wm)                   | PERFECT
#
# Features:
#
#TODO: Add ability to change or supplement title bar.
#TODO: Add optional line-wrapping functionality, with correct alignment.
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   libgtk2-perl (>= 2:1.24992-1build1)
#   perl (>= 5.26.1)
#------------------------------------------------------------------------------

use feature 'say';
use strict;
use warnings;
use Gtk2 '-init';

no warnings 'uninitialized';

use constant VERSION => '2022-04-13';
use constant PROGRAM => 'janein';
use constant PROGRAM_FANCY => 'JaNein';

sub Usage() {
	print(qq{Usage: ${\PROGRAM} [OPTS] [QUESTION]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -F, --no-frame           - Omit frame around the widgets.
		  -n, --no-cmd [CMD]       - Run shell CMD when result is False.
		  -s, --scheme [INT]       - See below for valid button schemes.
		  -y, --yes-cmd [CMD]      - Run shell CMD when result is True.

		  The use of '--' is supported in ${\PROGRAM_FANCY}.

		Button Schemes:

		  0: '_Yes' & '_No'               1: '_Accept' & '_Decline'
		  2: '_Agree' & '_Disagree'       3: '_Allow' & '_Deny'
		  4: '_True' & '_False'           5: '_Correct' & '_Incorrect'

		  The underscore ('_') denotes the mnemonic.
	} =~ tr/\t//dr);
}

my $Hush = 0;
my $NoFrame = 0;
my $Scheme = 0;

my ($YesText, $NoText, $YesCMD, $NoCMD, @ButtonSize);

while ( defined($ARGV[0]) ) {
	if ($ARGV[0] eq '--') {
		shift(); last()
	} elsif ($ARGV[0] =~ '^(--help|-h)$') {
		Usage(); exit(0)
	} elsif ($ARGV[0] =~ '^(--version|-v)$') {
		say(VERSION); exit(0)
	} elsif ($ARGV[0] =~ '^(--no-cmd|-n)$') {
		die("Err: Option '$ARGV[0]' requires an argument.\n")
			unless defined($ARGV[1]);

		$NoCMD = $ARGV[1];
		shift();
	} elsif ($ARGV[0] =~ '^(--scheme|-s)$') {
		die("Err: Option '$ARGV[0]' requires an argument.\n")
			unless defined($ARGV[1]);

		$Scheme = $ARGV[1];
		shift();
	} elsif ($ARGV[0] =~ '^(--yes-cmd|-y)$') {
		die("Err: Option '$ARGV[0]' requires an argument.\n")
			unless defined($ARGV[1]);

		$YesCMD = $ARGV[1];
		shift();
	} elsif ($ARGV[0] =~ '^(--no-frame|-F)$') {
		$NoFrame = 1
	} elsif ($ARGV[0] =~ '^-') {
		die("Err: Option '$ARGV[0]' invalid.\n")
	} else {
		last()
	}

	shift()
}

# Remaining arguments (not options -- duh) become the question; `echo` style.
my $Question = join(' ', @ARGV);

unless (defined($Question)) {
	die("Err: Question string missing.\n")
} elsif (length($Question) > 100) {
	die("Err: Question string exceeds maximum length.\n")
} elsif (not length($Question) > 0) {
	die("Err: Missing question string.\n")
}

sub Clicked($;$) {
	Gtk2::main_quit();

	if (defined($_[0])) {
		system($YesCMD)
	} else {
		system($NoCMD)
	}

	exit($_[1])
}

sub NewButton(\@;$) {
	my $Button = Gtk2::Button->new($_[1]);
	$Button->set_size_request(@{$_[0]});
	$Button->signal_connect('clicked' => \&Clicked, 0);

	return($Button)
}

unless ($Scheme) {
	($YesText, $NoText, @ButtonSize) = ('_Yes', '_No', (100, 60))
} elsif ($Scheme == 1) {
	($YesText, $NoText, @ButtonSize) = ('_Accept', '_Decline', (120, 60))
} elsif ($Scheme == 2) {
	($YesText, $NoText, @ButtonSize) = ('_Agree', '_Disagree', (120, 60))
} elsif ($Scheme == 3) {
	($YesText, $NoText, @ButtonSize) = ('_Allow', '_Deny', (110, 60))
} elsif ($Scheme == 4) {
	($YesText, $NoText, @ButtonSize) = ('_True', '_False', (120, 60))
} elsif ($Scheme == 5) {
	($YesText, $NoText, @ButtonSize) = ('_Correct', '_Incorrect', (120, 60))
} else {
	die("Err: Scheme '$Scheme' invalid.\n")
}

my $RootWin = Gtk2::Window->new();
$RootWin->set_title(PROGRAM_FANCY);
$RootWin->set_default_size(280, 120);
$RootWin->set_resizable(0);
$RootWin->set_decorated(1);
$RootWin->set_border_width(10);

$RootWin->signal_connect('destroy' => sub {Gtk2::main_quit()});
$RootWin->signal_connect('delete_event' => sub {return(0)});

my $VBox = Gtk2::VBox->new(0, 4);
$VBox->set_border_width(8);

# Putting HBoxButtons within HBoxMain to keep buttons centered sans stretching.
# Ensures minimum size is maintained, else buttons would be cropped.
my $HBoxMain = Gtk2::HBox->new(0, 4);
$HBoxMain->set_size_request(280, 46);

my $HBoxButtons = Gtk2::HBox->new(0, 4);
$HBoxButtons->set_border_width(8);

my $Frame = Gtk2::Frame->new();
$Frame->set_border_width(20);

my $Label = Gtk2::Label->new();
$Label->set_text($Question);
$Label->set_max_width_chars(100);
$Label->set_justify('center');
$Label->set_line_wrap(0);
$Label->set_line_wrap_mode('word');

my $JaButton = NewButton(@ButtonSize, $YesText);
my $NeinButton = NewButton(@ButtonSize, $NoText);

$VBox->pack_start($Label, 1, 1, 4);
$VBox->pack_start($HBoxMain, 0, 0, 4);

$HBoxMain->pack_start($HBoxButtons, 1, 0, 4);

$HBoxButtons->pack_start($JaButton, 1, 1, 4);
$HBoxButtons->pack_start($NeinButton, 1, 1, 4);

unless ($NoFrame) {
	$Frame->add($VBox);
	$RootWin->add($Frame);
} else {
	$RootWin->add($VBox);
}

$RootWin->show_all();

Gtk2::main(PROGRAM_FANCY)
