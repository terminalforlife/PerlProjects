#cito M:644 O:0 G:0 T:/usr/share/ubuchk/database
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/ubuchk/database
# Started On        - ???  ? Feb ??:??:?? GMT 2020
# Last Change       - Fri 29 Jan 03:06:57 GMT 2021
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------

:1491
A brief explanation by this user may satisfy your curiosity for now:
.
"The Linux kernel provides a tweakable setting that controls how often the swap file is used, called swappiness.
.
A swappiness setting of zero means that the disk will be avoided unless absolutely necessary (you run out of memory), while a swappiness setting of 100 means that programs will be swapped to disk almost instantly.
.
Ubuntu system comes with a default of 60, meaning that the swap file will be used fairly often if the memory usage is around half of my RAM."
.
  -- One Zero, February 13th, 2012, on askubuntu.com
.
Or, if you prefer, this user goes in further detail:
.
"The vm.swappiness option is a modifier that changes the balance between swapping out file cache pages in favour of anonymous pages. The file cache is given an arbitrary priority value of 200 from which vm.swappiness modifier is deducted (file_prio=200-vm.swappiness). Anonymous pages, by default, start out with 60 (anon_prio=vm.swappiness). This means that, by default, the priority weights stand moderately in favour of anonymous pages (anon_prio=60, file_prio=200-60=140). The behaviour is defined in mm/vmscan.c in the kernel source tree."
.
  -- Thomas Nyman, August 30th 2013, on unix.stackexchange.com
.
In short, it's debatable whether there's any need to change the swappiness value, but YMMV. It's often concluded that servers are the better use-cases for swappiness 60 (usually the default in Ubuntu distributions), and that 10 is the better setting for typical desktop use. You'll find arguments for and against adjusting this value all over the Internet, so, as always, come to your own conclusion.
:8852,2847
Log martians.
.
Refer to the default: `/etc/sysctl.conf`
:7512,1821
Apply the recommended values to enable Spoof protection (reverse-path filter). Turn on Source Address Verification in all interfaces to prevent some spoofing attacks.
.
Refer to the default: `/etc/sysctl.conf`
:1211,2916,9191,2529,6576,8963,6279,1291
Not a router. Also ignores ICMP redirects.
.
Refer to the default: `/etc/sysctl.conf`
:9222,2125,5668,1090
Block SYN attacks.
.
Refer to the default: `/etc/sysctl.conf`
:5434
Ignore pings.
.
Refer to the default: `/etc/sysctl.conf`
:9623
Restrict what users can garner from the kernel log. Due to the very sensitive and critical nature of the kernel, not to mention everything to which it has full access, it's almost always better to limit what users can glean from it.
:8560
Mentioned over at the kernel hardening security section of Arch Wiki:
.
"Setting kernel.kptr_restrict to 1 will hide kernel symbol addresses in /proc/kallsyms from regular users without CAP_SYSLOG, making it more difficult for kernel exploits to resolve addresses/symbols dynamically. This will not help that much on a pre-compiled Arch Linux kernel, since a determined attacker could just download the kernel package and get the symbols manually from there, but if you are compiling your own kernel, this can help mitigating local root exploits. This will break some perf commands when used by non-root users (but many perf features require root access anyway).
.
Setting kernel.kptr_restrict to 2 will hide kernel symbol addresses in /proc/kallsyms regardless of privileges."
.
  -- quoted as of February 2nd, 2020, on wiki.archlinux.org
:1443
General system security.
:7869
The permissions may well be excessive for the given file. Typically, a `$PATH` executable (`/bin`, `/sbin`, etc) should be no higher than `755` (`rwxr-xr-x`) unless more advanced permissions are set, for which, as of 2020-02-04, UbuChk doesn't check.
:6005,3579
If a `$PATH` executable is owned by a standard user or in such a group, chances are it's a mistake and/or security issue, therefore should probably be rectified. These files are usually, but certainly not always, owned by root (`0`) and part of the root group (`0`).
.
An exception to this would be if the executable is in the user's own '~/bin' directory, for example, in which case it makes sense for those files to be owned by the user and not by 'root'.
:6712
By default, in most Debian- and Ubuntu-based distributions of Linux, when a package is simply removed (even with `[--]autoremove`) global configuration and other associated files remain. This is observed when running `dpkg -l` in a terminal and looking for packages with a status of `rc`.
.
There may be situations in which you wish to keep the old configurations left by once-removed packages, such as if you plan to eventually re-install the package.
.
Purging a package can be done with the following:
.
  # apt-get purge PACKAGE
.
Or:
.
  # apt-get remove --purge PACKAGE
.
However you gain them, root privileges are usually required to deal with packages in Debian- and Ubuntu-based distributions of Linux, so either switch to the root user with su(1) prior to executing the above command, or use sudo(8).
.
If you have PurgeRC installed, you can simply run:
.
  # purgerc
.
To systematically purge all packages removed but not yet purged. You can find this small tool in the Extra repository of GitHub user 'terminalforlife'.
.
  https://github.com/terminalforlife/Extra
.
PurgeRC was written by the same person who wrote UbuChk.
:6131,6132,6133,6134,6135,6136,6137,6138
Refer to the man pages apt.conf(5), apt_preferences(5), and apt(8) for further information on setting special configuration keys for APT.
:6998,6997,6996,6995,6994,6993
X11Forwarding -- While incredibly useful, it's often recommended to disabled it, due to security concerns.
.
PasswordAuthentication, PermitEmptyPasswords -- A must-have during setup, and for otherwise gaining access when keys aren't working, but keep in mind that this is nowhere near as safe as using cryptographic keys. Disables "tunneled clear text passwords", as it says in the default `sshd_config`.
:5656
There are a number of packages often made readily available in Ubuntu-based distributions which aren't required by most people, this alert simply means you've found one or more of these packages.
.
To find out about a given package, open up a terminal and run `apt-cache show PKG`, where 'PKG' is the package name about which you which to learn.
:5541,5542
The Uncomplicated FireWall, the front-end to `iptables` is disabled and/or inactive (as it usually is by default), but this doesn't necessarily mean that you're now rendered super-vulnerable to every whack-job with a computer and a grudge to bear, but you are probably best to enable it, just in-case.
.
This poster says it aptly:
.
"Out of the box, Ubuntu ships with no TCP or UDP ports open, hence the belief that there's no reason to run Uncomplicated Firewall (ufw) by default. I agree, though, that having ufw disabled is a strange decision. My reasoning being that inexperienced users are feasibly going to install things like Samba, Apache and such like as they experiment with the system put before them. If they don't understand the implications of this, they will expose themselves to malicious behaviour on the internet.
.
Example - I've got my laptop configured with Samba which is fine in my home network protected with WPA2. But if I take my laptop to a Starbucks, I might not think anything of it, but that laptop is now advertising my shares to all and sundry. With a firewall, I can restrict my samba ports to only my home server or peer devices. No need to worry as much now about who might be trying to connect to my laptop. Same goes for VNC, SSH, or a huge number of other useful services my laptop might be running, or trying to connect to.
.
Ubuntu takes a very on/off approach to certain elements of security, a philosophy I can't agree with. Security might be technically on or off, but by layering elements of security over one another, you end up with a better system. Sure, Ubuntu's security is good enough for a large number of use cases, but not all.
.
Bottom line, run ufw. Better safe than sorry."
.
  -- Scaine, January 22nd, 2011, on askubuntu.com
:1411,1412,1413,1414,1415,1416,1417,1418
Refer to systemd-system.conf(5) and systemd(1) for in-depth information.
.
Apparently, it's recommended, for security, to set `DefaultLimitNPROC` to `1024`, `DefaultLimitNOFILE` to `1024`, CrashShell to `no`, and DumpCore to `no`. (citation needed)
:1274,1275,1276
Presents potential vulnerabilities, regarding the old CVE-2017-5689, which may or may not have actually been (successfully) patched on your installation. There's a good chance you don't need these modules anyway, but if you do, and have otherwise mitigated any risk as a result of this CVE or similar, you can disable this test.
.
"An unprivileged network attacker could gain system privileges to provisioned Intel manageability SKUs: Intel Active Management Technology (AMT) and Intel Standard Manageability (ISM). An unprivileged local attacker could provision manageability features gaining unprivileged network or local system privileges on Intel manageability SKUs: Intel Active Management Technology (AMT), Intel Standard Manageability (ISM), and Intel Small Business Technology (SBT)."
.
  -- Published May 2nd, 2017, on cvedetails.com
:7416
If you're a gamer, this might be useful, but for the rest of us, you needn't have this module loaded up every time you boot into Linux.
:8471
If you use a mouse via PS/2 ports, then you'll need this module, but in these modern times, the likelihood is probably not too high.
:8189
You've specified your own module(s) of which to check the existence and live status.
:0913
To disable the ability to restart the machine with just Ctrl + Alt + Del, akin to the old behavior within Windows, either run `sysctl -w kernel.ctrl-alt-del=1` or add `kernel.ctrl-alt-del=1` to `/etc/sysctl.conf`.
.
"It always a good practice to disable reboot of your Linux servers using the shortcut keys “Ctrl-Alt-Delete”. There are some scenarios where someone physically access your Ubuntu and Debian servers and without logging into your server he/she can reboot it using the keys “Ctrl-Alt-Delete”. In case of virtual machines if any one get the console then it can also be rebooted via shortcut keys. So to avoid these conditions and accidental reboots, one should always disable reboot via shortcut keys “Ctrl-Alt-Delete”."
.
  -- Pradeep Antil, March 17th, 2019, on linuxbuzz.com
.
"In Linux , It’s a security concern for us  to allow anyone  to reboot the server using  Ctrl-Alt-Del keys. It is always recommended in production boxes that one should disable reboot using Ctrl-Alt-Del keys."
.
  -- Pradeep Kumar, August 17th, 2014, linuxtechi.com
:5431,5438,5439
It's recommended for the `~/.ssh` directory itself have permissions of no more than `700` (`rwx------`) in order to protect your files within it, as these are very sensitive. SSH even goes so far as to sometimes refuse execution if the permissions are too open. Ownership is also a concern, with ownership and group access best left to the user and his or her own group.
.
"It [SSH] protects user keys by enforcing rwx------ on $HOME/.ssh and ensuring only the owner has write permissions to $HOME. If a user other than the respective owner has write permission on the $HOME directory, they could maliciously modify the permissions on $HOME/.ssh, potentially hijacking the user keys, known_hosts, or something similar."
.
  -- George MGeorge M, April 23rd, 2012, on unix.stackexchange.com
:4612
A disk is almost full. Hunt down some stuff you don't need, then remove it. You could also make a backup somewhere, then delete the backed-up files. There are many ways in which to save disk space, so you'll have plenty of options available to you. You could even resort to compression formats via archiving utilities.
:5436
The `/boot` directory typically contains important and potentially sensitive boot information, the knowledge of which could theoretically provide a hacker or would-be nuisance with ammunition.
.
You've really very little to lose by simply ensuring only the `root` user (and/or users with such access) can really view or do anything with these files.
.
Running the `chmod 700 /boot` command, as the `root` user (using something like `sudo` or `doas` prefixed), should suffice.
:5446
Typically, every users has his or her own somewhat (or entirely) private HOME area, into which files and directories can be stored. The `root` user (like `Administrator` in Micro$oft Windows) is no exception, but this special user, with a user ID of `0`, has its HOME area in `/root` to keep it entirely separate from the rest of the users.
.
Given the nature of the `root` account, it would seem common sense to lock this directory and its contents right down, which is exactly the default in what should be all distributions and iterations of Linux or indeed any similar OS!
.
However, if you've received this alert, it means the mode (permissions) for this highly sensitive directory are above the recommended `700` (`rwx------`). To rectify this, simply execute `chmod 700 /root` within a terminal. Note that this will of course usually require `root` access in the first place.
.
You may wish to ensure the `/root` directory is owned by `root` and in the `root` group, by running `chown 0:0 /root`.
.
For information on the chown(1) and chmod(1) commands, refer to their respective man pages.
:5440
While a user's own HOME area isn't quite as sensitive as many of the system directories, it still can contain personal, identifiable, and otherwise sensitive files better kept private, such as SSH keys and entire user-specific web browsing data.
:7541
Not assigning a port for the SSH Daemon to use will still result in the default of '22', the use of which is strongly discouraged, as it is so often knocked on.
:2850,2849
Letting the battery completely die, while writes are being made to the storage device, could result in data loss, or at the very least, a corrupted filesystem. Since operating systems are typically performing lots of writes during operation, it's worth ensuring your device has ample juice.
.
If you wish to push the battery to its limit, but still want to avoid data loss, you should open up a terminal and execute the `sync` command, which will synchronise all cached writes to the disk(s), but this will not protect you after-the-fact.
:4811
Please use a search engine to look for the detected vulnerability and the version of Linux (the kernel) you're running. Chances are, lots of people are working on it across the board, and/or the threat is so low and specific that you needn't really worry.
:7536
The magic system request key is set to '0' by default in Debian (disables it). Setting it to '1' (enables it all); this could be considerably unwanted or even dangerous, if local mischief were possible.
.
However, this key can also be a handy method by which to recover a system or avoid data loss in the event of an otherwise unrecoverable crash. If the system is not a server and/or has no risk of local tampering, then feel free to ignore this alert.
:9999,9998
If set to '1', these parameters will prevent creating or following links under certain conditions. In Debian, these are both enabled by default.
.
Refer to the default: `/etc/sysctl.conf`
:1356
By default, the execution bit (permission) is allowed to be set on files in order to execute them with a method such as `./file`, but this could pose a security risk, as anything could then be executed with whichever permissions the current user has, which is especially dangerous when you consider what could be downloaded without your knowledge.
.
However, setting this option can also cause irritating issues by program like Valve's Steam (popular gaming client) which requires execution privileges on one or more files installed in the user's HOME. If you're a Mozilla Firefox user, you'll also very likely run into issues when trying to access content like Netflix.
.
While setting this mount option will add an additional layer of security, there is still only so much damage that can be done without root privileges, which the user typically doesn't have without first entering his or her own password, or root's itself.
.
This is one of the many reasons why setting `sudo` to ignore the need to enter a password in order to gain elevated privileges can be a grave error in judgement. A similar problem occurs when setting things up in such a way that a user can log in without the need to even enter a password.
:1357
The `nodev` mount(8) option, disallows devices to be mounted to a path within the associated filesystem; the use of this option bolsters security.
:1358
Undocumented.
:6237
Whether a temperature is considered as truly harmful or even dangerous, really depends on the CPU. Most modern CPUs should be able to withstand very high temperatures (>= 100°C) but this comes at the cost of the reduction of the CPU's lifespan, which is especially unwanted for expensive processors. Another important compromise made with a hot-running CPU, is throttling; temporarily underclocking the CPU in an effort to bring down the temperature, which of course means that performance can take a nose-dive.
.
However, there are a number of ways to reduce the thermal limits your CPU reaches, such as by improving the cooling capabilities of your machine, using higher quality fans, using a better CPU heatsink, improving cable management, and even resorting to various water-cooling methods. Sometimes just clearing out some dust-bunnies can improve temperatures, if a machine is particularly dirty.
.
In some cases, although more of a temporary measure, you may want to disable unneeded cores and/or permanently underclock the CPU.
.
However you approach this issue, it's recommended that you sort it soon, because the longer you continue to run your machine at high temperatures, the higher the risk of hardware failure, and the shorter the life-span.
.
Lastly, let's not forget that if the CPU is very hot, this is in turn heating up other components in your machine, which could lead to other failures, such as data loss from burned up storage devices.
:9708
When Debian packages are installed, they're cached to save re-downloading them if they're needed once more; this can vastly improve the speed of package installation and save on your bandwidth, but it comes at the cost of some disk space.
.
If you wish to remove the existing cached Debian packages, you can run `sudo apt-get clean`, assuming you have `sudo` available. You can also manually remove the files, over at `/var/cache/apt/archives`.
:9188
SystemD users should not use guest logins, because they're not "being confined", as is briefly explained within one of the configurations files provided with LightDM, alongside mention of CVE-2017-8900 and the following link:
.
https://bugs.launchpad.net/bugs/1663157
:7125,7126,7127,7128,7129,7130,7131,7132,7133,7134,7135,7136,7137,7138,7139,7140,7141,7142,7143,7144,7145,7146,7147,7148,7149,7150,7151,7152,7153,7154,7155,7156,7157,7158,7159,7160,7161,7162,7163,7164,7165,7166,7167,7168,7169,7170,7171,7172,7173,7174,7175,7176,7177,7178,7179,7180,7181,7182,7183,7184,7185,7186,7187,7188,7189,7190,7191,7192,7193,7194
A potential Trojan, rootkit, or worm has been discovered. Do note, that this is strictly a potentiality, so before panic-deleting, look further into the possible infections by referring to your search engine and/or known credible sources.
.
For a general overview as to what these words even mean, check out the following link:
.
https://www.guidingtech.com/8888/difference-between-malware-virus-rootkits-trojans-worm-spyware
:7619
It's typically -- if not always -- harmless to clear out the user's `~/.cache` directory. At worst, you'll moderately interfere with some current programs you've got running, such as firefox(1). While these files are certainly useful, they're can easily wind up consuming a large sum of your storage space.
.
To clear out the current user's common cache files, execute `rm -r ~/.cache` within a terminal.
:7620
Removing the contents of the `~/.thumbnails` directory is highly unlikely to be problematic, short of causing icons to re-cache, making it take a little longer to load them the first time. This directory can grow fairly large in size, as many icons get cached.
.
In a system dominated by terminals, such as one typically running i3(1) or another tiling window manager, icons will rarely be used and so rarely be cached; in this situation, you'd likely not even notice a difference if you were to remove the directory.
.
Modern machines, particularly those with SSDs, will likely not even remotely break a sweat loading a few icons, so removing the thumbnails cache (via `~/.thumbnails`, to clarify) further results in very little impact to performance.
:3790
As in the dpkg(1) man page, via the `--no-debsig` option. Debian GPG signature verification has been long disabled because it's no longer supported. Enabling this feature (`dpkg-verify`) would result in every single package being rejected.
.
Please refer to the default DPKG configuration file UbuChk parsed in order to discover this value, stored in `/etc/dpkg/dpkg.cfg`.
:3791
Ordinarily, you want as much as possible logged, for security and diagnostic reasons. Since package management can get quite hairy, it would be wise to enable logging for DPKG, unless you're sure you don't need it or it otherwise doesn't apply to you.
:8759
Chances are, your RAM is/was low, and/or the `vm.swappiness` kernel parameter is misconfigured for your setup, resulting in Swap being used.
.
If you're running your Swap partition or file on an SSD, the performance hit of using Swap over RAM won't be nearly as noticeable (if at all) as if on a HDD. None-the-less, using Swap is certainly not the goal.
.
There's heavy debate within the Linux community as to whether you even need Swap at all. In my opinion, the answer is yes, you do need at least some Swap space, but it's contextual; it really depends on the use-case, hardware, and software. In your case, since you've hit the limit, either the default or one of your own specification, Swap space is potentially very important to you and should not at all be disabled.
.
"The Linux Kernel divides RAM into chunks of memories and the swapping process is when the Linux Kernel uses a hard disk [storage] space (swap space) to store information from RAM and thus releases some RAM space. That is why when you install a Linux distribution, the installation wizard usually asks you to assign some space for the system and another for the swap." -- averagelinuxuser.com
.
These days, it's common for a Swap file to be used instead of a partition, which former of which is much more convenient due to its flexibility.
:6232,6233,6234
A Swap file (or 'Pagefile', as it's known in Windows) is a sensitive component to an OS, as is its partition variant, therefore ensuring more locked-down permissions, ownership, and group of the Swap file, is very, very important. It's possible to glean sensitive information from a Swap file.
.
When creating a Swap file, if it's too permissive, or not owned by and in the group of the `root` user, then you'll likely be notified and told to rectify it before being able to continue.
.
You may also find alert #8759 an interesting read.
:8971
The system's RAM usage has reached the amount specified in the current user's ubuchk(8) configuration file (or overridden on the command line). You may wish to run a lighter desktop environment, opt for lighter software, and/or perhaps upgrade the total amount of RAM in your machine.
:1118
These little 3.6v, non-rechargeable CMOS batteries help to keep your CMOS RAM (non-volatile BIOS memory) alive; without it, your BIOS or UEFI cannot remember its settings following a loss of power, including the time and date.
.
While these Lithium-Ion coin cell batteries (uncommonly other kinds) are often designed to maintain power for around three years without the machine even receiving power, they will eventually die, so it's worth remembering that, especially if you're on a very old machine.
.
To remove the CMOS battery, please refer to your motherboard's manual.
:1428
Please refer to your search engine of choice. Rest assured, this is not something you want to take lightly, as it very likely indicates that your system has been compromised.
.
Ensure that you run security tools like chkrootkit(1) and rkhunter(1) alongside perhaps also ensuring you've ran ubuchk(8) with the `RootKit` key enabled.
.
Alert #9849 contains information which may also be relevant here.
:9848
Ordinarily, only the `root` user should ever be assigned a UID and GID or `0`, so if another user with such an ID pops up, be on high alert!
.
You now have the option to lock the user account using passwd(1), remove the account completely using usermod(8), or throw your computer out of the window, never to speak of this day again. Maybe all of the above, in order.
.
Disconnect your Internet & any critical storage devices, immediately perform a full image back up using something like Clonezilla, then proceed to scour the drive, hoping to find what the mystery hijacker has done, if anything.
.
Anything which has been connected to the system should be assumed infected and unsafe, so be sure to scan them in a safe environment. Refer to the Interwebs (on a different machine, obviously) for thorough guides on how to analyse the data and determine if any damage has been done.
:6990
By default, `root` login via SSH is disabled, according to ubuntu18.com, however, it's best to err on the side of caution. Explicitly disable PermitRootLogin, by setting its value to `no` in the `/etc/ssh/sshd_config` file, or whichever file is appropriate to your setup.
:6980
The `root` user has access to everything; the keys of Kingdom, so naturally, allowing such an important, vital user to be accessible remotely, is almost always an unnecessary risk. It seems agreed world-wide that `root` access via SSH should be explicitly disabled from the get-go.
.
If you still must obtain elevated privileges via SSH remote connections, which is certainly commonplace, then simply resort to a utility like sudo(8) or doas(1).
.
Refer also to alert #6990.
:6991,6992
To quote the ssh_config(5) man page: "Protocol 1 suffers from a number of cryptographic weaknesses and should not be used." It's available to "support legacy devices", so ensure you're using the 2nd protocol.
.
Although the aforementioned man page states that the default value is `2`, it couldn't hurt to be cautious by explicitly specifying the 2nd protocol.
:1298
You can activate the AppArmor service by running, if using SystemD `systemctl start apparmor`, or if using an older SysV init system, you can run `service apparmor start`.
.
For further information, refer to apparmor(7), apparmor.d(5), and maybe even apparmor_status(8).
:1299
The Mandatory Access Control (MAC) system, apparmor(7), makes use of the Linux Security module to restrict software. Although UbuChk has detected that it's installed, it's currently not enabled at boot-time.
.
To enable AppArmor, if using SystemD, execute `systemctl enable apparmor` using a terminal, or if on the older SysV init system, you can execute `service apparmor enable`.
.
Refer also to alert #1298 for more information, such as a list of useful man pages.
:2223
Refer to the faillog(8) man page. You will also want to open up `/var/log/faillog` for information on the failed login attempts.
:8760
Incomplete query. For now, please refer to alert #8759 for relevant information.
:9993
A Linux system administrator, named Frederik, found over at https://blog.frehi.be, feels that eBPF -- the Extended Berkeley Packet Filter -- should be disabled, for security, if the user is sure he or she has no need of it.
.
You might find the following exhaustive post an interesting read:
.
https://lwn.net/Articles/660331
:9992
In 2017, Gus Khawaja of Plural Sight (https://www.pluralsight.com) recommends setting this kernel parameter to `0`, disabling the ability to forward IP addresses, and increasing security as a result.
.
You may find this parameter is already disabled by default on your Linux installation, but if you're reading this, chances are you've discovered it's enabled. If you're sure you have no need to forward IP addresses, go ahead and disable this parameter.
:8128
Setting this file's mode to '400' can be done by using the chmod(1) command to that effect in `/etc/rc.local`, or similar file, to ensure it works at boot-time.
.
You can find mention of this, through:
.
  https://lwn.net/Articles/415609/
.
"Making /proc/kallsyms readable only for root makes it harder for attackers to write generic kernel exploits by removing one source of knowledge where things are in the kernel." -- Marcus Meissner
.
This might already be handled for you, but just in-case, UbuChk will check.
:2623
Undocumented.
:9211
At some point, a security feature was added to the Linux kernel called Address Space Layout Randomization (ASLR); the kernel parameter in question allows us to configure it.
.
Here's what Michael Boelen from 'linux-audit.com' has to say about this kernel parameter:
.
"Normally you might expect a value of 0 (disabled), or 1 (enabled). In the case of the randomize_va_space setting, this is true as well. When setting the value to 1, address space is randomized. This includes the positions of the stack itself, virtual dynamic shared object (VDSO) page, and shared memory regions. Setting the option to value 2 will be similar to 1, and add data segments as well. For most systems, this setting is the default and the most secure setting."
.
So, with this in mind, you're probably better off setting this value to 2, or at least 1, if for some reason 2 isn't an option.
