#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/dtp
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/dtp/dtp
# Started On        - Fri  5 Mar 19:54:53 GMT 2021
# Last Change       - Sun  7 Mar 15:27:07 GMT 2021
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Portable, lightweight storage device HDD/SSD temperature viewer for devices
# which have mounted filesystems. This small utility makes use of the new
# 'drivetemp' feature of the modern kernel, via SYSFS, accessible with the
# 'hwmon' class.
#
# Features:
#
#TODO: Use drive's own recommended operating ranges.
#TODO: Allow use of `-o`|`--output` to adjust the columns.
#TODO: Consider allowing user to list drives exceeding a given temperature.
#TODO: Check user-provided ranges are within valid... ranges.
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   perl (>= 5.22.1)
#------------------------------------------------------------------------------

use v5.22.1;
use strict;
use warnings;
use autodie;

no warnings 'uninitialized';

my $CurVer = '2021-03-07';
my $Progrm = 'dtp';

sub Usage {
	print(qq{Usage: $Progrm [OPTS] [DEV_1 [DEV_2] ...]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  --no-header              - Omit table header from output.
		  --size=[U]               - Use unit U, instead of bytes.
		  -C, --no-color           - Disable ANSI color escape sequences.
		  -H, --si                 - For size, use powers of 1000, not 1024.
		  -N, --no-notation        - Omit the temperature notation.
		  -f, --fahrenheit         - Display temperatures in Fahrenheit.
		  -r, --ranges [L,H]       - Use temperature ranges of L and H.
	} =~ tr/\t//dr)
}

sub Err($;$) {
	printf(STDERR "ERROR: %s\n", $_[1]);
	$_[0] and exit($_[0])
}

my $HWMon = '/sys/class/hwmon';
my $BlockDirs = '/sys/block';
my $CustomRanges = 0;
my $Notation = '°C';
my $ShowHeader = 1;
my $Fahrenheit = 0;
my $ShowColor = 1;
my $Unit = 'B';
my $Powers = 1024;

my %Colors = (
		'red'    => "\e[91m",
		'green'  => "\e[92m",
		'yellow' => "\e[93m",
		'blue'   => "\e[94m",
		'purple' => "\e[95m",
		'cyan'   => "\e[96m",
		'grey'  => "\e[2;37m",
		'reset'  => "\e[0m"
);

# High and low temperature ranges.
my %Ranges = (
	'F' => [122, 86],
	'C' => [50, 30]
);

while (defined($ARGV[0])) {
	if ($ARGV[0] =~ '^(--help|-h)$') {
		Usage(); exit(0)
	} elsif ($ARGV[0] =~ '^(--version|-v)$') {
		print("$CurVer\n"); exit(0)
	} elsif ($ARGV[0] eq '--no-header') {
		$ShowHeader = 0
	} elsif ($ARGV[0] =~ '^--size=') {
		my ($OPT, $Value) = split('=', $ARGV[0]);
		unless (length($Value)) {
			Err(1, "OPT '$OPT=' missing its value.")
		} elsif ($Value eq 'B' or $Value eq 'b') {
			Err(1, "Redundant specification of bytes.")
		} elsif ($Value !~ /^(K|M|G|T|P)$/i) {
			Err(1, "OPT '$OPT=' given an invalid unit.")
		} else {
			$Unit = uc($Value)
		}
	} elsif ($ARGV[0] =~ '^(--no-color|-C)$') {
		$ShowColor = 0;
		undef(%Colors)
	} elsif ($ARGV[0] =~ '^(--no-notation|-N)$') {
		$Notation = ''
	} elsif ($ARGV[0] =~ '^(--si|-H)$') {
		$Powers = 1000
	} elsif ($ARGV[0] =~ '^(--fahrenheit|-f)$') {
		($Fahrenheit, $Notation) = (1, '°F')
	} elsif ($ARGV[0] =~ '^(--ranges|-r)$') {
		if (length($ARGV[1])) {
			if ($ARGV[1] =~ '^([[:digit:]]+),([[:digit:]]+)$') {
				$CustomRanges = 1;

				# Filling both measurements, intentionally.
				%Ranges = (
					'F' => [$2, $1],
					'C' => [$2, $1]
				)
			} else {
				Err(1, "One or more invalid ranges.")
			}

			shift()
		} else {
			Err(1, "OPT '$ARGV[0]' requires an argument.")
		}
	} elsif ($ARGV[0] =~ '^-') {
		Err(1, 'Incorrect option(s) specified.')
	} else {
		last
	}

	shift()
}

if (not $ShowColor and $CustomRanges) {
	Err(1, 'Color support required for custom ranges.')
} elsif ($Unit eq 'B' and $Powers == 1000) {
	Err(1, 'Powers of 1000 redundant if displaying bytes.')
}

my @Targets;
my $TargetErr = 0;
while (defined($ARGV[0])) {
	if ($ARGV[0] =~ '^/dev/(sd|fd|hd)[[:alpha:]]+$') {
		push(@Targets, $ARGV[0])
	} else {
		warn("$!");
		$TargetErr++
	}

	shift()
}

exit(1) if $TargetErr > 0;

#--------------------------------------------------------------Main Subroutines

sub ReadFile($) {
	my $File = $_[0];

	-f $File or Err(1, "File '$File' missing.");
	-r $File or Err(1, "File '$File' unreadable.");

	open(my $FH, '<', $File) or die("$!");
	chomp(my $Buffer = join("\n", <$FH>));
	close($FH);

	return($Buffer =~ s/[[:space:]]+$//r)
}

sub Width($;$) {
	my ($String, $MaxWidth) = @_;

	my $Width = length($String);
	if ($Width > $MaxWidth) {
		return($Width)
	} else {
		return($MaxWidth)
	}
}

#------------------------------------------Populate Hash with Determined Values

# Fetch bulk of column information.
my (%Drives, @Keys);
my $MaxWidthRev = length('REV');
my $MaxWidthModel = length('MODEL');
my $MaxWidthBlock = length('NAME');
my $MaxWidthState = length('STATE');
foreach my $Dir (glob("$HWMon/hwmon[0-9]*")) {
	-d -r -x $Dir or next;

	my ($Model, $Temp, $State, $Rev, $Block) = ('') x 5;
	foreach my $File (glob("$Dir/*")) {
		-f -r $File or next;

		if ($File =~ '/name$') {
			if (ReadFile($File) eq 'drivetemp') {
				foreach my $DevFile (glob("$Dir/device/*")) {
					-f -r $DevFile or next;

					# Get some column values.
					if ($DevFile =~ '/model$') {
						$Model = ReadFile($DevFile);
						$MaxWidthModel = Width($Model, $MaxWidthModel)
					} elsif ($DevFile =~ '/state$') {
						$State = ReadFile($DevFile);
						$MaxWidthState = Width($State, $MaxWidthState)
					} elsif ($DevFile =~ '/rev$') {
						$Rev = ReadFile($DevFile);
						$MaxWidthRev = Width($Rev, $MaxWidthRev)
					}
				}

				# Determine the block device name.
				if (-d -r -x "$Dir/device/block") {
					$Block = (glob("$Dir/device/block/*"))[0];
					if (-d $Block) {
						$Block = '/dev/' . ($Block =~ m{(?:.*/)([^/].*)})[0];
						$MaxWidthBlock = Width($Block, $MaxWidthBlock)
					} else {
						$Block = ''
					}
				}
			}
		} elsif ($File =~ '/temp1_input$') {
			$Temp = ReadFile($File)
		} elsif (length($Model) and length($Temp)) {
			($#Targets > -1 and not grep({$_ eq $Block} @Targets)) and next;
			$Drives{$Block} = [$State, $Rev, $Model, $Temp]
		}
	}
}

@Keys = keys(%Drives);
scalar(@Keys) or Err(1, 'No storage devices found.');

my ($Sectors, $Size);
my $MaxWidthSize = length('SIZE_?');
foreach my $Key (@Keys) {
	my $Base = ($Key =~ m{(?:.*/)([^/].*)})[0];
	my $BlockDir = "$BlockDirs/$Base";

	# Determine if it's a rotational drive.
	if (-d "$BlockDir/queue") {
		my $Rotational = ReadFile("$BlockDir/queue/rotational");
		$Rotational and $Rotational = 'true' or $Rotational = 'false';
		push(@{$Drives{$Key}}, $Rotational || '???')
	} else {
		# Just in-case, but shouldn't happen.
		push(@{$Drives{$Key}}, '???')
	}

	# Determine drive's size, based on the hardware sector size.
	my $SizeFile = "$BlockDir/size";
	my $SectorFile = "$BlockDir/queue/hw_sector_size";
	-f -r $SectorFile and $Sectors = ReadFile($SectorFile);
	-f -r $SizeFile and $Size = ReadFile($SizeFile);
	my $Bytes = $Size * $Sectors;

	# Use sizes in the specified unit.
	my $FinalSize = $Bytes;
	foreach ('B', 'K', 'M', 'G', 'T', 'P') {
		last if $_ eq $Unit;

		$FinalSize = $FinalSize / $Powers
	}

	# Have to do this here and not via `printf()`, due to possible '???'.
	$FinalSize = $FinalSize =~ s/(\d+\.\d{2})\d+$/$1/r;

	# When the size of the drive is too small for the unit to cleanly display.
	$FinalSize !~ '^(\d+|\d+\.\d+)$' and $FinalSize = '0.00';

	push(@{$Drives{$Key}}, $FinalSize || '???');

	my $SizeWidth = length($FinalSize);
	$SizeWidth > $MaxWidthSize and $MaxWidthSize = $SizeWidth
}

#----------------------------------------------------Begin Displaying the Table

# Display the header, sized dynamically.
if ($ShowHeader and scalar(@Keys)) {
	my $HeaderSize = "SIZE_$Unit";
	$Unit eq 'B' and $HeaderSize = 'SIZE';

	printf(
		$Colors{'grey'} . "%-*s %-*s %-*s %-*s %-5s %-*s %-s\n" . $Colors{'reset'},
		$MaxWidthBlock, 'NAME', $MaxWidthState, 'STATE', $MaxWidthModel,
		'MODEL', $MaxWidthRev, 'REV', 'ROT', $MaxWidthSize, $HeaderSize, 'TEMP'
	);
}

sub Display($;$;$) {
	my ($Key, $Temp, $Color) = @_;

	printf(
		"%-*s %-*s %-*s %*s %-5s %-*s $Colors{$Color}%d$Colors{'reset'}%s\n",
		$MaxWidthBlock, $Key, $MaxWidthState, $Drives{$Key}->[0],
		$MaxWidthModel, $Drives{$Key}->[2], $MaxWidthRev,
		$Drives{$Key}->[1], $Drives{$Key}->[4], $MaxWidthSize,
		$Drives{$Key}->[5], $Temp, $Notation
	)
}

sub Ranges($;$;$;$) {
	my ($CurrentTemp, $High, $Low, $Key) = @_;

	if ($CurrentTemp > $High) {
		Display($Key, $CurrentTemp, 'red')
	} elsif ($CurrentTemp > $Low and $CurrentTemp <= $High) {
		Display($Key, $CurrentTemp, 'yellow')
	} else {
		Display($Key, $CurrentTemp, 'green')
	}
}

foreach my $Key (sort({$a cmp $b} @Keys)) {
	my $Temp = $Drives{$Key}->[3] =~ s/\d{3}$//r;
	$Fahrenheit and $Temp = int(($Temp * 1.8) + 32);

	if ($ShowColor) {
		if ($Fahrenheit) {
			Ranges($Temp, $Ranges{'F'}->[0], $Ranges{'F'}->[1], $Key)
		} else {
			Ranges($Temp, $Ranges{'C'}->[0], $Ranges{'C'}->[1], $Key)
		}
	} else {
		Display($Key, $Temp, undef)
	}
}
