#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/dtp
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/dtp/dtp
# Started On        - Fri  5 Mar 19:54:53 GMT 2021
# Last Change       - Wed 19 Jan 17:59:09 GMT 2022
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Portable, lightweight storage device HDD/SSD temperature viewer for devices
# which have mounted filesystems. This small utility makes use of the new
# 'drivetemp' feature of the modern kernel, via SYSFS, accessible with the
# 'hwmon' class.
#
# Features:
#
#TODO: Use drive's own recommended operating ranges.
#TODO: Consider allowing user to list drives exceeding a given temperature.
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   perl (>= 5.22.1)
#------------------------------------------------------------------------------

use v5.22.1;
use strict;
use warnings;
use autodie;

no warnings 'uninitialized';

my $CurVer = '2022-01-19';
my $Progrm = 'dtp';

sub Usage {
	print(qq{Usage: $Progrm [OPTS] [DEV_1 [DEV_2] ...]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  --no-header              - Omit table header from output.
		  -C, --no-color           - Disable ANSI color escape sequences.
		  -H, --si                 - For size, use powers of 1000, not 1024.
		  -N, --no-notation        - Omit the temperature notation.
		  -f, --fahrenheit         - Display temperatures in Fahrenheit.
		  -o, --output FMT         - Use FMT instead of the default layout.
		  -r, --ranges {VL|L|H|VH} - Use provided temperature ranges.
	} =~ tr/\t//dr)
}

sub Err($;$) {
	printf(STDERR "ERROR: %s\n", $_[1]);
	$_[0] and exit($_[0])
}

my @ValidCols = qw{name state model rev rot size temp};
my $HWMon = '/sys/class/hwmon';
my $BlockDirs = '/sys/block';
my $CustomRanges = 0;
my $Notation = '°C';
my $ShowHeader = 1;
my $Fahrenheit = 0;
my $ShowColor = 1;
my $Powers = 1024;
my $Unit = 'B';

my %Colors = (
		'red'    => "\e[91m",
		'green'  => "\e[92m",
		'yellow' => "\e[93m",
		'blue'   => "\e[94m",
		'purple' => "\e[95m",
		'cyan'   => "\e[96m",
		'grey'  => "\e[2;37m",
		'reset'  => "\e[0m"
);

# In order: very low, low, high, and very high temperatures.
my %Ranges = (
	'F' => [68, 77, 104, 122],
	'C' => [20, 25, 40, 50]
);

my @TargetCols;
while (defined($ARGV[0])) {
	if ($ARGV[0] =~ '^(--help|-h)$') {
		Usage(); exit(0)
	} elsif ($ARGV[0] =~ '^(--version|-v)$') {
		print("$CurVer\n"); exit(0)
	} elsif ($ARGV[0] eq '--no-header') {
		$ShowHeader = 0
	} elsif ($ARGV[0] =~ '^(--no-color|-C)$') {
		$ShowColor = 0;
		undef(%Colors)
	} elsif ($ARGV[0] =~ '^(--no-notation|-N)$') {
		$Notation = ''
	} elsif ($ARGV[0] =~ '^(--si|-H)$') {
		$Powers = 1000
	} elsif ($ARGV[0] =~ '^(--fahrenheit|-f)$') {
		if ($Notation eq '') {
			$Fahrenheit = 1
		} else {
			($Fahrenheit, $Notation) = (1, '°F')
		}
	} elsif ($ARGV[0] =~ '^(--output|-o)$') {
		length($ARGV[1]) or Err(1, "OPT '$ARGV[0]' requires an argument.");

		my $InvalidCols = 0;
		foreach my $Col (split(',', $ARGV[1])) {
			if (grep({$_ eq $Col} @ValidCols)) {
				push(@TargetCols, $Col)
			} else {
				$InvalidCols++;
				Err(0, "Requested column '$Col' invalid.")
			}
		}

		$InvalidCols > 0 and exit(1);

		shift()
	} elsif ($ARGV[0] =~ '^(--ranges|-r)$') {
		if (length($ARGV[1])) {
			if ($ARGV[1] =~ /^(\d+),(\d+),(\d+),(\d+)$/a) {
				$4 < $3 and Err(1, "Value VH less than H, for '$ARGV[0]' OPT.");
				$3 < $2 and Err(1, "Value H less than L, for '$ARGV[0]' OPT.");
				$2 < $1 and Err(1, "Value L less than VL, for '$ARGV[0]' OPT.");

				$CustomRanges = 1;

				# Filling both measurements, intentionally.
				%Ranges = (
					'F' => [$1, $2, $3, $4],
					'C' => [$1, $2, $3, $4]
				)
			} else {
				Err(1, "One or more invalid ranges.")
			}

			shift()
		} else {
			Err(1, "OPT '$ARGV[0]' requires an argument.")
		}
	} elsif ($ARGV[0] =~ '^-') {
		Err(1, 'Incorrect option(s) specified.')
	} else {
		last
	}

	shift()
}

if (not $ShowColor and $CustomRanges) {
	Err(1, 'Color support required for custom ranges.')
} elsif ($Unit eq 'B' and $Powers == 1000) {
	Err(1, 'Powers of 1000 redundant if displaying bytes.')
}

my @Targets;
my $TargetErr = 0;
while (defined($ARGV[0])) {
	if ($ARGV[0] =~ '^/dev/(sd|fd|hd)[[:alpha:]]+$') {
		push(@Targets, $ARGV[0])
	} else {
		Err(0, "DEV '$ARGV[0]' invalid.");
		$TargetErr++
	}

	shift()
}

exit(1) if $TargetErr > 0;

#--------------------------------------------------------------Main Subroutines

sub ReadFile($) {
	my $File = $_[0];

	-f $File or Err(1, "File '$File' missing.");
	-r $File or Err(1, "File '$File' unreadable.");

	open(my $FH, '<', $File) or die("$!");
	chomp(my $Buffer = join("\n", <$FH>));
	close($FH);

	return($Buffer =~ s/[[:space:]]+$//r)
}

sub Width($;$) {
	my ($String, $MaxWidth) = @_;

	my $Width = length($String);
	if ($Width > $MaxWidth) {
		return($Width)
	} else {
		return($MaxWidth)
	}
}

sub Human($) {
	my $Size = $_[0];
	foreach ('', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y') {
		if ($Size < $Powers) {
			my $Result = sprintf("%.1f", $Size);
			my $Len = length($Result);
			my $LastTwo = substr($Result, $Len - 2);
			if ($LastTwo eq '.0') {
				return(substr($Result, 0, $Len - 2) . $_)
			} else {
				return($Result . $_)
			}
		}

		$Size = $Size / $Powers
	}
}

#------------------------------------------Populate Hash with Determined Values

# Fetch bulk of column information.
my (%Drives, @Keys);
my $MaxWidthRev = length('REV');
my $MaxWidthTemp = length('TEMP');
my $MaxWidthModel = length('MODEL');
my $MaxWidthBlock = length('NAME');
my $MaxWidthState = length('STATE');
foreach my $Dir (glob("$HWMon/hwmon[0-9]*")) {
	-d -r -x $Dir or next;

	my ($Model, $Temp, $State, $Rev, $Block) = ('') x 5;
	foreach my $File (glob("$Dir/*")) {
		-f -r $File or next;

		if ($File =~ '/name$') {
			if (ReadFile($File) eq 'drivetemp') {
				foreach my $DevFile (glob("$Dir/device/*")) {
					-f -r $DevFile or next;

					# Get some column values.
					if ($DevFile =~ '/model$') {
						$Model = ReadFile($DevFile);
						$MaxWidthModel = Width($Model, $MaxWidthModel)
					} elsif ($DevFile =~ '/state$') {
						$State = ReadFile($DevFile);
						$MaxWidthState = Width($State, $MaxWidthState)
					} elsif ($DevFile =~ '/rev$') {
						$Rev = ReadFile($DevFile);
						$MaxWidthRev = Width($Rev, $MaxWidthRev)
					}
				}

				# Determine the block device name.
				if (-d -r -x "$Dir/device/block") {
					$Block = (glob("$Dir/device/block/*"))[0];
					if (-d $Block) {
						$Block = '/dev/' . ($Block =~ m{(?:.*/)([^/].*)})[0];
						$MaxWidthBlock = Width($Block, $MaxWidthBlock)
					} else {
						$Block = ''
					}
				}
			}
		} elsif ($File =~ '/temp1_input$') {
			$Temp = ReadFile($File) =~ s/\d{3}$//ra;
			$Fahrenheit and $Temp = int(($Temp * 1.8) + 32);
			$MaxWidthTemp = Width("$Temp$Notation", $MaxWidthTemp);
		} elsif (length($Model) and length($Temp)) {
			($#Targets > -1 and not grep({$_ eq $Block} @Targets)) and next;
			$Drives{$Block} = [$State, $Rev, $Model, "$Temp$Notation"]
		}
	}
}

@Keys = keys(%Drives);
scalar(@Keys) or Err(1, 'No storage devices found.');

my ($Sectors, $Size);
my $MaxWidthSize = length('SIZE_?');
foreach my $Key (@Keys) {
	my $Base = ($Key =~ m{(?:.*/)([^/].*)})[0];
	my $BlockDir = "$BlockDirs/$Base";

	# Determine if it's a rotational drive.
	if (-d "$BlockDir/queue") {
		my $Rotational = ReadFile("$BlockDir/queue/rotational");
		$Rotational and $Rotational = 'true' or $Rotational = 'false';
		push(@{$Drives{$Key}}, $Rotational || '???')
	} else {
		# Just in-case, but shouldn't happen.
		push(@{$Drives{$Key}}, '???')
	}

	# Determine drive's size, based on the hardware sector size.
	my $SizeFile = "$BlockDir/size";
	my $SectorFile = "$BlockDir/queue/hw_sector_size";
	-f -r $SectorFile and $Sectors = ReadFile($SectorFile);
	-f -r $SizeFile and $Size = ReadFile($SizeFile);
	my $Size = Human($Size * $Sectors);

	push(@{$Drives{$Key}}, $Size || '???');

	my $SizeWidth = length($Size);
	$SizeWidth > $MaxWidthSize and $MaxWidthSize = $SizeWidth
}

#----------------------------------------------------Begin Displaying the Table

# Display the header, sized dynamically.
if ($ShowHeader and scalar(@Keys)) {
	my $HeaderSize = "SIZE_$Unit";
	$Unit eq 'B' and $HeaderSize = 'SIZE';

	if ($#TargetCols > -1) {
		my @Data;
		foreach my $Col (@TargetCols) {
			if ($Col eq 'name') {
				push(@Data, sprintf("%-*s", $MaxWidthBlock, 'NAME'))
			} elsif ($Col eq 'state') {
				push(@Data, sprintf("%-*s", $MaxWidthState, 'STATE'))
			} elsif ($Col eq 'model') {
				push(@Data, sprintf("%-*s", $MaxWidthModel, 'MODEL'))
			} elsif ($Col eq 'rev') {
				push(@Data, sprintf("%-*s", $MaxWidthRev, 'REV'))
			} elsif ($Col eq 'rot') {
				push(@Data, sprintf("%-5s", 'ROT'))
			} elsif ($Col eq 'size') {
				push(@Data, sprintf("%-*s", $MaxWidthSize, 'SIZE'))
			} elsif ($Col eq 'temp') {
				push(@Data, sprintf("%-*s", $MaxWidthTemp - 1, 'TEMP'))
				#         I've no idea why this is needed. -^
			}
		}

		map(print($Colors{'grey'} . "$_ " . $Colors{'reset'}), @Data);
		print("\n")
	} else {
		printf(
			$Colors{'grey'} . "%-*s %-*s %-*s %-*s %-5s %-*s %-s\n" . $Colors{'reset'},
			$MaxWidthBlock, 'NAME', $MaxWidthState, 'STATE', $MaxWidthModel,
			'MODEL', $MaxWidthRev, 'REV', 'ROT', $MaxWidthSize, $HeaderSize, 'TEMP'
		);
	}
}

sub Display($;$;$) {
	my ($Key, $Temp, $Color) = @_;

	if ($#TargetCols > -1) {
		my @Data;
		foreach my $Col (@TargetCols) {
			if ($Col eq 'name') {
				push(@Data, sprintf('%-*s', $MaxWidthBlock, $Key))
			} elsif ($Col eq 'state') {
				push(@Data, sprintf('%-*s', $MaxWidthState, $Drives{$Key}->[0]))
			} elsif ($Col eq 'model') {
				push(@Data, sprintf('%-*s', $MaxWidthModel, $Drives{$Key}->[2]))
			} elsif ($Col eq 'rev') {
				push(@Data, sprintf('%-*s', $MaxWidthRev, $Drives{$Key}->[1]))
			} elsif ($Col eq 'rot') {
				push(@Data, sprintf('%-5s', $Drives{$Key}->[4]))
			} elsif ($Col eq 'size') {
				push(@Data, sprintf('%-*s', $MaxWidthSize, $Drives{$Key}->[5]))
			} elsif ($Col eq 'temp') {
				push(@Data, sprintf("$Colors{$Color}%-*s$Colors{'reset'}", $MaxWidthTemp, $Temp))
			}
		}

		map(print("$_ "), @Data);
		print("\n")
	} else {
		printf(
			"%-*s %-*s %-*s %*s %-5s %-*s $Colors{$Color}%s$Colors{'reset'}\n",
			$MaxWidthBlock, $Key, $MaxWidthState, $Drives{$Key}->[0],
			$MaxWidthModel, $Drives{$Key}->[2], $MaxWidthRev,
			$Drives{$Key}->[1], $Drives{$Key}->[4], $MaxWidthSize,
			$Drives{$Key}->[5], $Temp
		)
	}
}

sub Ranges($;$;$;$;$;$) {
	my ($CurrentTemp, $VeryLow, $Low, $High, $VeryHigh, $Key) = @_;
	my $CurrentTempRaw = $CurrentTemp =~ tr/01234567890//drc;

	if ($CurrentTempRaw > $VeryHigh) {
		Display($Key, $CurrentTemp, 'red')
	} elsif ($CurrentTempRaw >= $High and $CurrentTempRaw <= $VeryHigh) {
		Display($Key, $CurrentTemp, 'yellow')
	} elsif ($CurrentTempRaw > $Low and $CurrentTempRaw < $High) {
		Display($Key, $CurrentTemp, 'green')
	} elsif ($CurrentTempRaw > $VeryLow and $CurrentTempRaw <= $Low) {
		Display($Key, $CurrentTemp, 'cyan')
	} elsif ($CurrentTempRaw <= $VeryLow) {
		Display($Key, $CurrentTemp, 'blue')
	}
}

foreach my $Key (sort({$a cmp $b} @Keys)) {
	my $Temp = $Drives{$Key}->[3];

	if ($ShowColor) {
		if ($Fahrenheit) {
			Ranges($Temp, $Ranges{'F'}->[0], $Ranges{'F'}->[1], $Ranges{'F'}->[2], $Ranges{'F'}->[3], $Key)
		} else {
			Ranges($Temp, $Ranges{'C'}->[0], $Ranges{'C'}->[1], $Ranges{'C'}->[2], $Ranges{'C'}->[3], $Key)
		}
	} else {
		Display($Key, $Temp, undef)
	}
}
