#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/apt-undo-install
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/apt-undo-install/apt-undo-install
# Started On        - Tue 23 Apr 18:46:07 BST 2019
# Last Change       - Sun 14 Mar 00:52:04 GMT 2021
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Features:
#
# N/A
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   apt (>= 1.2.32)
#   bsdmainutils (>= 9.0.6)
#   less (>= 481-2.1)
#   libapt-pkg-perl (>= 0.1.29build7)
#   perl (>= 5.22.1-9)
#------------------------------------------------------------------------------

require AptPkg::Cache;

use v5.22.1;
use strict;
use warnings;
use autodie;

no warnings 'uninitialized';

my $CurVer = '2021-03-14';
my $Progrm = 'apt-undo-install';

sub Usage {
	print(qq{Usage: $Progrm [OPTS]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  --output-only:[F]        - List only installed packages.
		  -V, --view               - View the contents of the logfile.
		  -c, --count [N]          - Undo N number of installations.
		  -d, --date [YYYY-MM-DD]  - Specify by the installation date.
		  -l, --logfile [FILE]     - Specify an alternative logfile.
		  -t, --time [HH:MM:SS]    - Specify by the installation time.

		  Remaining options are passed over to apt-get(8).

		  Valid '--output-only:' formats are 'col', 'desc', and 'list'.

		  The '--date|-d' and '--time|-t' options may fail to work with your
		  APT logfile if you're using non-standard localisation settings for an
		  English-speaker. These flags should also not be used with the
		  '--count|-c' flag.
	} =~ tr/\t//dr)
}

# By default, just the one package install process will be undone.
my $TimesExec = 1;

my $AptLogFile = '/var/log/apt/history.log';

my (
	$OutputFormat, $ToAssume, $ViewLog, $OutOnly,
	$BeQuiet, $ToSim, $FiltaDate, $FiltaTime
);

while (defined($ARGV[0])) {
	if ($ARGV[0] =~ '^(--help|-h|-\?)$') {
		Usage(); exit(0)
	} elsif ($ARGV[0] =~ '^(--version|-v)$') {
		print($CurVer . "\n"); exit(0)
	} elsif ($ARGV[0] =~ '^--output-only:(desc|list|col)$') {
		$OutputFormat = $1;
		$OutOnly = 1
	} elsif ($ARGV[0] =~ '^(--view|-V)$') {
		$ViewLog = 1
	} elsif ($ARGV[0] =~ '^(--count|-c)$') {
		shift();

		length($ARGV[0]) or die("Missing count for '$1' OPT");
		$ARGV[0] =~ /^\d+$/a or die("Invalid count for '$1' OPT");

		$TimesExec = $ARGV[0]
	} elsif ($ARGV[0] =~ '^(--date|-d)$') {
		shift();

		length($ARGV[0]) or die("Missing date for '$1' OPT");
		$ARGV[0] =~ /^\d+-\d+-\d+$/a or die("Invalid date for '$1' OPT");

		$FiltaDate = $ARGV[0]
	} elsif ($ARGV[0] =~ '^(--logfile|-l)$') {
		shift();

		length($ARGV[0]) or die("Missing file for '$1' OPT");

		$AptLogFile = $ARGV[0];
	} elsif ($ARGV[0] =~ '^(--time|-t)$') {
		shift();

		length($ARGV[0]) or die("Missing time for '$1' OPT");
		$ARGV[0] =~ /^\d+:\d+:\d+$/a or die("Invalid time for '$1' OPT");

		$FiltaTime = $ARGV[0]
	} elsif ($ARGV[0] =~ '^-') {
		print("Handing remaining flags over to apt-get(8)...\n");
		last
	} else {
		die("Unrecognised arguments) specified")
	}

	shift()
}

my @PathFiles;
foreach my $Dir (split(':', $ENV{'PATH'})) {
	-d -r -x $Dir or next;

	my @Files = map(m{.*/(.*)$}, glob("$Dir/*"));
	push(@PathFiles, @Files)
}

my $MissingDeps = 0;
foreach my $CurDep ('apt-get', 'column', 'less') {
	unless (grep({$_ eq $CurDep} @PathFiles)) {
		warn("Dependency '$CurDep' not met");
		$MissingDeps++
	}
}

exit(1) if $MissingDeps;

if ($ViewLog) {
	system(qq{less "$AptLogFile"});
	exit(0)
}

-f $AptLogFile or die("File '$AptLogFile' missing");
-r $AptLogFile or die("File '$AptLogFile' unreadable");

open(my $FH, '<', $AptLogFile);
my @Data = <$FH>;
close($FH);

my $InstallWC = 0;
my @InstallOnlyLines;
foreach (@Data) {
	next unless $_ =~ '^Install:';

	push(@InstallOnlyLines, $_);
	$InstallWC++
}

$TimesExec > $InstallWC and die("Only $InstallWC available undo(s)");

my @InstalledPKGs;
if ($FiltaDate and $FiltaTime) {
	my $SeenDate = 0;
	my $Count = 0;
	my @CurLine;

	foreach my $Buffer (@Data) {
		next if length($Buffer) <= 1;
		@CurLine = split(" ", $Buffer);

		if ($CurLine[0] eq "Start-Date:") {
			if ($CurLine[1] eq $FiltaDate and $CurLine[2] eq $FiltaTime) {
				$SeenDate = 1;
				$Count = 0
			}
		}

		$SeenDate and $Count++;
		next unless $Count == 4 and $CurLine[0] eq 'Install:';

		foreach (@CurLine) {
			/^(Install:|.*[\(\)].*)/ or push(@InstalledPKGs, $_)
		}

		last
	}

	@InstalledPKGs or die("Invalid time and/or date specified")
} elsif (not ($FiltaDate and $FiltaTime) and ($FiltaDate or $FiltaTime)) {
	die("Options '--date|-d' and '--time|-t' come as a pair")
} else {
	my $DesiredIndices = $InstallWC - $TimesExec;
	foreach ($DesiredIndices..$InstallWC) {
		next unless $InstallOnlyLines[$_]; # <-- Avoids empty line errors.

		foreach (split(" ", $InstallOnlyLines[$_])) {
			/^(Install:|.*[\)\(].*|automatic)$/ or push(@InstalledPKGs, $_)
		}
	}
}

unless ($OutOnly) {
	system(
		"apt-get @ARGV remove -o Dpkg::Progress-Fancy=true" .
		" -o Dpkg::Progress=true @InstalledPKGs"
	)
} else {
	if ($OutputFormat eq 'desc') {
		use AptPkg::Cache;

		my $Cache = AptPkg::Cache->new();
		my $Descs = $Cache->packages('DescriptionList');
		foreach (@InstalledPKGs) {
			my $Gets = $Cache->get($_);
			my $Name = $Gets->{'FullName'};
			my $Desc = $Descs->lookup("$_")->{'ShortDesc'};
			printf("%s - %s\n", $Name, $Desc)
		}
	} elsif ($OutputFormat eq 'col') {
		system("printf '%s\n' @InstalledPKGs | column")
	} elsif ($OutputFormat eq 'list') {
		print("$_\n") foreach @InstalledPKGs
	}
}
