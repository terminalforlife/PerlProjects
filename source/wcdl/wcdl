#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/wcdl
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/wcdl/wcdl
# Started On        - Sat 27 Apr 18:54:48 BST 2019
# Last Change       - Sat 16 Apr 22:49:46 BST 2022
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Features:
#
#TODO: Add a preview feature. Use ImageMagick.
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   libimage-magick-perl (>= 8:6.8.9.9-7)
#   libwww-perl (>= 6.15-1)
#   libx11-protocol-perl (>= 0.56-7)
#   perl (>= 5.26.1)
#   perl-modules-5.26 (>= 5.26.1-6)
#------------------------------------------------------------------------------

use strict;
use warnings;
use autodie;
use Term::ANSIColor qw{GREEN RED BOLD RESET YELLOW};
use File::Basename 'dirname';
use File::Path 'make_path';
use LWP::UserAgent;
use X11::Protocol;
use Image::Magick;
use POSIX 'ceil';
use File::Temp;

no warnings 'uninitialized';

my $CurVer = '2022-04-16';
my $Progrm = 'wcdl';

sub Usage{
	print(qq{Usage: $Progrm [OPTS] [CATEGORY] [PAGE]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  --clobber                - Overwrite processed image files.
		  --colorless              - Disable ANSI color support.
		  --repopulate             - Repopulate processed cache files.
		  --show-categories        - List categories, plus details.
		  --show-resolutions       - List available resolutions.
		  -D, --dest <PATH>        - Specify where to save files.
		  -F, --force              - Make missing target directory.
		  -N, --no-cache           - Don't use or keep cache.
		  -O, --links-only         - Output only the download links.
		  -f, --filter <TAG>       - Omit images not matching TAG.
		  -p, --png                - Convert JPG image to PNG format.
		  -r, --resolution <WxH>   - Use resolution of width by height.
	} =~ tr/\t//dr)
}

my $Domain = 'https://wallpaperscraft.com';
my $LocalDir = "$ENV{HOME}/.local/share/$Progrm";
my $CacheDir = "$LocalDir/cache";
my $CacheCats = "$CacheDir/categories";
my $CachePages = "$CacheDir/pages";
my $HomePage = "$CacheDir/homepage";

my (
	$Resolution, $Clobber, $SaveAsPNG, $Repopulate, $LinksOnly, @Resolutions,
	%CatNums, $ListCats, $NoCache, $Filter, @FilterMatch, $ShowRes, $ForceDir
);

my $Destination = './';
my $Color = 1;

while (defined($ARGV[0])){
	if ($ARGV[0] =~ '^(--help|-h|-\?)$'){
		Usage(); exit(0)
	}elsif ($ARGV[0] =~ '^(--version|-v)$'){
		print("$CurVer\n"); exit(0)
	}elsif ($ARGV[0] eq '--colorless'){
		$Color = 0
	}elsif ($ARGV[0] =~ '^(--links-only|-O)$'){
		$LinksOnly = 1
	}elsif ($ARGV[0] eq '--show-categories'){
		$ListCats = 1
	}elsif ($ARGV[0] eq '--show-resolutions'){
		$ShowRes = 1
	}elsif ($ARGV[0] =~ '^(--force|-F)$'){
		$ForceDir = 1
	}elsif ($ARGV[0] =~ '^(--resolution|-r)$'){
		shift(@ARGV);

		if ($ARGV[0] =~ '^[0-9]+x[0-9]+$'){
			$Resolution = $ARGV[0]
		}else{
			die("Invalid resolution chosen")
		}
	}elsif ($ARGV[0] =~ '^(--filter|-f)$'){
		shift(@ARGV);

		$Filter = 1;
		push(@FilterMatch, $ARGV[0])
	}elsif ($ARGV[0] =~ '^(--png|-p)$'){
		$SaveAsPNG = 1
	}elsif ($ARGV[0] =~ '^(--dest|-D)$'){
		shift(@ARGV);

		$Destination = $ARGV[0] =~ s/\/$//r;

		unless (-d $Destination){
			if ($ForceDir){
				mkdir($Destination)
					or die("Failed to create new directory")
			}else{
				die("Directory not found")
			}
		}
	}elsif ($ARGV[0] eq '--repopulate'){
		$Repopulate = 1
	}elsif ($ARGV[0] eq '--clobber'){
		$Clobber = 1
	}elsif ($ARGV[0] =~ '^(--no-cache|-N)$'){
		$NoCache = 1
	}elsif ($ARGV[0] =~ '^-'){
		die("Incorrect argument(s) specifie")
	}else{
		last
	}

	shift(@ARGV)
}

#----------------------------------------------------------------------UA SETUP

my $UA = LWP::UserAgent->new(
	'protocols_allowed' => ['http', 'https'],
	'agent' => 'Mozilla/5.0',
	'max_redirect' => 1,
	'timeout' => 10
);

#-------------------------------------------------------------PRIMARY FUNCTIONS

my $TempFile; # <-- Set scope here, for later cleanup.
sub PageDL{
	my $Dir = dirname($_[0]);
	make_path($Dir) unless -d $Dir;

	unless ($NoCache){
		if (not $Repopulate and -f $_[0]){
			return(1)
		}elsif ($Repopulate or not -f $_[0]){
			# Extra -f condition because file doesn't always exist.
			unlink($_[0]) if $Repopulate and -f $_[0];

			open(my $FH, '>:encoding(UTF-8)', $_[0]);

			my $Data = $UA->get($_[1]);
			if ($Data->is_success()){
				print($FH $Data->decoded_content())
			}else{
				unlink($_[0]);

				die("Unable to fetch and cache page data")
			}

			close($FH)
		}
	}else{
		# Ignoring the first index to ensure no cache overwrites.

		die("Told to repopulate, but '--no-cache|N' is enable")
			if $Repopulate;

		my $FH = File::Temp->new(UNLINK => 0, SUFFIX => "_{$Progrm}.tmp");
		binmode($FH, ':utf8'); # <-- Ensure temp file uses UTF-8 encoding.
		$TempFile = $FH->filename();

		my $Data = $UA->get($_[1]);
		if ($Data->is_success()){
			print($FH $Data->decoded_content())
		}else{
			unlink($_[1]);

			die("Unable to fetch page data")
		}

		close($FH)
	}
}

sub ImageDL{
	return(1) if -f $_[0] and not $Clobber;

	open(my $FH, '>', $_[0]);

	my $Data = $UA->get($_[1]);
	if ($Data->is_success()){
		print($FH $Data->decoded_content());
	}else{
		if ($Color){
			print(BOLD . RED . "[!]" . RESET);
		}else{
			print("[!]");
		}

		unlink($_[0]);
		return(1)
	}

	close($FH);

	if ($SaveAsPNG){
		my $ImageObj = Image::Magick->new();
		$ImageObj->Read($_[0]);
		$ImageObj->Write($_[0] =~ s/\.jpg$/.png/r);
		unlink($_[0]) # <-- Remove the original after conversion.
	}
}

#----------------------------------------------------------RESOLUTION DETECTION

if (length($Resolution) == 0){
	my $X11 = X11::Protocol->new();
	my $X = $X11->{screens}[0]{width_in_pixels};
	my $Y = $X11->{screens}[0]{height_in_pixels};
	$Resolution = $X . 'x' . $Y
}

#--------------------------------------------------CATEGORY & HOMEPAGE HANDLING

PageDL($HomePage, $Domain);
open(my $FH, '<:encoding(UTF-8)', $HomePage);

while (<$FH>){
	chomp();

	# Generate hash keys and their numeric values.
	if ($_ =~ /class="filter__count"/){
		my @Line = split('<', $_);
		my $Category = $Line[0] =~ s/(\s+|<.*$)//r;

		if ($Category !~ /60 Favorites$/){
			# Site not updated URL after name change.
			$Category = 'hi-tech' if $Category eq "Technologies";

			my $NUM = $Line[1] =~ s/^.*>//gr;
			$CatNums{lc($Category) =~ s/\s/_/gr} = $NUM
		}
	}elsif ($_ =~ /value="[0-9]+x[0-9]+"/){
		my @Line = split(' ', $_);
		push(@Resolutions, $Line[1] =~ s/("|value=)//gr)
	}
}

close($FH);
unlink($TempFile) if $NoCache;

if ($ShowRes){
	print("$_\n") foreach @Resolutions;
	exit(0)
}

if ($ListCats){
	if ($Color){
		printf(
			BOLD . GREEN . "%-14s %s %s\n" . RESET,
			"CATEGORY", "IMAGES", "PAGES"
		);
	}else{
		printf("%-14s %s %s\n", "CATEGORY", "IMAGES", "PAGES");
	}

	foreach (keys(%CatNums)){
		my $PageTTL = ceil($CatNums{$_});
		printf("%-14s %6d %d\n", $_, $CatNums{$_}, ceil($PageTTL / 15))
	}

	exit(0)
}

if ($ARGV[0] and not exists($CatNums{$ARGV[0]})){
	die("Invalid category provided")
}

#----------------------------------------------------------PROCESS PAGE NUMBERS

my @Pages;
unless ($ARGV[1]){
	die("At least one (non-0) page must be provided")
}else{
	my @PAGE_NUM_LIST = split(' ', $ARGV[1]);
	foreach (@PAGE_NUM_LIST){
		if ($_ =~ /^([1-9]|[1-9][0-9]+)$/){
			push(@Pages, $_)
		}elsif ($_ =~ /^[0-9]+-[0-9]+$/){
			# Process ranges, like 1-4, which would output '1 2 3 4'.
			my ($START, $END) = split('-', $_);
			my @NUMS = ($START..$END);
			push(@Pages, $_) foreach @NUMS
		}else{
			die("Invalid page number detected")
		}
	}
}

#-------------------------------------------------------------IMAGE DOWNLOADING

my $DL_LINK = 'https://images.wallpaperscraft.com/image';

foreach (@Pages){
	my $DLFH;

	# Check the user didn't enter too high a page number, by dividing the total
	# number of images (hence the hash) for the chosen category, by 15. Must
	# round up with `ceil()` (`POSIX`), as final page may display 1-15 images.
	my $TOTAL_IMAGES_INTO_PAGES = ceil($CatNums{$ARGV[0]} / 15);

	die("Page '$_' is out of range")
		if $_ > $TOTAL_IMAGES_INTO_PAGES;

	if (length($Resolution) > 0){
		my $FoundRes = 0;
		foreach (@Resolutions){
			if ($_ eq $Resolution){
				$FoundRes = 1;
				last
			}
		}

		die("Resolution not supported") unless $FoundRes
	}

	PageDL(
		"$CacheCats/$ARGV[0]/$Resolution/$_",
		"$Domain/catalog/$ARGV[0]/page$_"
	);

	unless ($NoCache){
		open($DLFH, '<:encoding(UTF-8)', "$CacheCats/$ARGV[0]/$Resolution/$_");
	}else{
		open($DLFH, '<:encoding(UTF-8)', "$TempFile");
	}

	my ($ID, $TagsID, $FullLink);

	while (<$DLFH>){
		chomp();

		if ($_ =~ /src="https:/ and $_ =~ /class="wallpapers__image"/){
			my @Line = split(' ', $_);

			$TagsID = $Line[2] =~ s/(^src=".*\/|"|_[0-9]+x[0-9]+\.jpg"$)//gr;
			$ID = $TagsID =~ s/^.*_//gr;
			$FullLink = "$DL_LINK/${TagsID}_$Resolution.jpg";

			# For the --filter|-f feature. Multiple of these flags can be used
			# to further narrow down the desired image.
			if ($Filter){
				my $FilterCount = 0;
				my $TAGS = $TagsID =~ s/_[0-9]+$//r;
				foreach (@FilterMatch){
					if ($TAGS !~ /$_/){
						next
					}else{
						$FilterCount += 1
					}
				}

				# If the total number of matches equal the amount of indices in
				# the array, in a human-readable way, then skip to next image.
				next if $FilterCount < $#FilterMatch + 1
			}

			if ($LinksOnly){
				print("$FullLink\n")
			}else{
				if ($Color){
					print(
						BOLD . YELLOW . "FILE:" . RESET .
						" '${TagsID}_$Resolution.jpg' "
					);
				}else{
					print("FILE: '${TagsID}_$Resolution.jpg' ");
				}

				ImageDL("$Destination/${TagsID}_$Resolution.jpg", $FullLink);
				print("\n")
			}
		}
	}

	unlink($TempFile) if $NoCache
}
