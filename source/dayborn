#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/dayborn
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/dayborn
# Started On        - Mon 10 Feb 23:49:15 GMT 2020
# Last Change       - Sun 10 Apr 22:54:58 BST 2022
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# This project was originally called Iteration. The aim was to generate a more
# traditional version number from the delta of the two timestamps, the time the
# project was born, and the time of the last change made.
#
# In the end, it wound up being a nifty little program which simply outputs how
# many days it has been since the project was born, hence the name.
#
# Dependencies:
#
#   perl (>= 5.10)
#------------------------------------------------------------------------------

require Date::Format;
require Time::Piece;

use feature 'say';
use strict;
use warnings;
use Date::Format 'time2str';
use Time::Piece;

no warnings 'uninitialized';

use constant VERSION => '2022-04-10';
use constant PROGRAM => 'dayborn';

sub Usage() {
	print(qq{Usage: ${\PROGRAM} [OPTS] FILE_1 [FILE_2 ...]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
	} =~ tr/\t//dr)
}

while (defined($ARGV[0])) {
	if ($ARGV[0] =~ '^(--help|-h)$') {
		Usage(); exit(0)
	} elsif ($ARGV[0] =~ '^(--version|-v)$') {
		say(VERSION); exit(0)
	} elsif ($ARGV[0] =~ '^-') {
		die("Err: Incorrect option(s) specified.\n")
	} else {
		last()
	}

	shift()
}

die("Err: File name(s) required.\n") if @ARGV == 0;

foreach my $File (@ARGV) {
	die("Err: File '$File' not found.\n") unless -f $File;
	die("Err: File '$File' unreadable.\n") unless -r $File;
	die("Err: File '$File' is binary.\n") if -B $File;

	if (open(my $FH, '<', $File)) {
		my ($Start, $Now);
		while (<$FH>){
			next() unless /^# (Started|Last) /;

			chomp(my @Arr = split(' '));

			# The following format (sans quotes) is expected:
			#
			#   '# Started On        - Mon 10 Feb 23:49:15 GMT 2020'
			#
			if ($Arr[1] eq 'Started') {
				$Start = Time::Piece->strptime(
					join(' ', @Arr[4,6,5,7,9]), '%a %b %d %T %Z %Y'
				)->epoch()
			}

			# The following format (sans quotes) is expected:
			#
			#   '# Last Change       - Tue 11 Feb 01:00:34 GMT 2020'
			#
			if ($Arr[1] eq 'Last') {
				$Now = Time::Piece->strptime(
					join(' ', @Arr[4,6,5,7,9]), '%a %b %d %T %Z %Y'
				)->epoch()
			}
		}

		close($FH) or die("$!");

		my $Project = ($File =~ m{(?:.*/)?([^/].*)})[0];
		my $DeltaDay = ($Now - $Start) / 60 / 60 / 24;

		printf("Project '%s' was born %.2f day's ago.\n", $Project, $DeltaDay)
	} else {
		die("$!")
	}
}
