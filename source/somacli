#!/usr/bin/perl
#cito M:755 O:0 G:0 T:/usr/bin/somacli
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/somacli
# Started On        - Fri  6 Nov 23:18:28 GMT 2020
# Last Change       - Mon 25 Apr 22:49:36 BST 2022
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Very basic, for now. Might expand on it, but the core functionality is there.
#
# Features:
#
# N/A
#
# Bugs:
#
#TODO: Broken, as of at least 2022-04-25.
#
# Dependencies:
#
#   perl (>= 5.26.1)
#   perl-modules-5.26 (>= 5.26.1-6)
#------------------------------------------------------------------------------

use feature 'say';
use strict;
use warnings;
use HTTP::Tiny;

no warnings 'uninitialized';

use constant VERSION => '2022-04-25';
use constant PROGRAM => 'somacli';
use constant PROGRAM_FANCY => 'Soma CLI';

sub Usage() {
	print(qq{Usage: ${\PROGRAM} [OPTS] [STATION]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -s, --stations           - List available station information.
	} =~ tr/\t//dr)
}

use constant PLAY_URL => 'https://somafm.com';

my $ShowInfo = 0;

while (defined($ARGV[0])) {
	if ($ARGV[0] =~ '^(--help|-h)$') {
		Usage(); exit(0)
	} elsif ($ARGV[0] =~ '^(--version|-v)$') {
		say(VERSION); exit(0)
	} elsif ($ARGV[0] =~ '^(--stations|-s)$') {
		$ShowInfo = 1
	} elsif ($ARGV[0] =~ '^-') {
		die("Err: Incorrect option(s) specified.\n")
	} else {
		last()
	}

	shift()
}

die("Err: Too many arguments provided.\n")
	if @ARGV > 1;

die("Err: Station not provided.\n")
	unless @ARGV;

#--------------------------------------------Parse Site for Station Information

my $WebPage = HTTP::Tiny->new()->get(PLAY_URL . '/listen');

die("Problems connecting to SomaFM")
	unless $WebPage->{'success'};

# This isn't really all that effecient; it's a nice place-holder for future
# expansion of SomaCLI, though. It gets used well when listing stations.
my $MaxLenCounter = 6;
my (%Station, $MaxLenName, $Name, $Desc, $Counter, $URL);
foreach (split("\n", $WebPage->{'content'})) {
	chomp();

	if (/^\<h3\>.*\<\/h3\>$/) {
		# This is what the user has to enter to select a station; inconvenient.
		$Name = (m{(^\<h3\>)(.*)(\</h3\>$)})[1];

		# Determine maximum length needed for printf() later on.
		$MaxLenName < length($Name) and $MaxLenName = length($Name)
	} elsif (/^\<p class="descr"\>/) {
		$Desc = (m{(^\<p class="descr"\>)(.*)(\</p\>$)})[1];
		$Station{$Name}{'Desc'} = $Desc
	} elsif (/\<nobr>MP3:/) {
		$URL = (m{(\<a href=\")(.*)(\"\>)})[1];
		$Station{$Name}{'URL'} = $URL
	} elsif (/^\<dd\>[0-9]+\<\/dd\>$/) {
		$Counter = (m{(\<dd\>)(.*)(\</dd\>)})[1];
		$Station{$Name}{'Counter'} = $Counter;

		# Determine maximum length needed for printf() later on.
		$MaxLenCounter = length($Counter)
			if $MaxLenCounter < length($Counter)
	} elsif (/\<!-- end stations --\>/) {
		# Station list has ended, so we're done here.
		last()
	}
}

# Free some memory.
undef($WebPage);

#---------------------------------------------------Display Station Information

if ($ShowInfo) {
	printf(
		"%-*s  %-*s\n",
		$MaxLenName, 'STATION',
		$MaxLenCounter, 'ACTIVE'
	);

	printf(
		"%-*s  %-*d\n", $MaxLenName, $_,
		$MaxLenCounter, $Station{$_}{'Counter'}
	) foreach sort({$a cmp $b} keys(%Station));

	exit(0)
}

die("Err: Station NAME not provided.\n")
	unless length($ARGV[0]);

#-----------------------------------------------------Play Station with MPlayer

die("Err: Station not found.\n")
	 unless exists($Station{$ARGV[0]});

print("Playing '$ARGV[0]' (Ctrl + C to Quit) ... ");

# Ideally, I'd have Perl play this file itself, but I don't know how. The
# closest I can think of, is to use GStreamer, but I'm not sure how, because
# I'm finding the documentation to be lackluster.
system(
	'mplayer -nogui -input nodefault-bindings:conf=/dev/null ' .
	"-really-quiet -playlist '${\PLAY_URL}$Station{$ARGV[0]}{URL}' " .
	'1> /dev/null 2>&1'
);

print("\n")
