#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/topdw
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/topdw/topdw
# Started On        - Wed  7 Jul 14:59:41 BST 2021
# Last Change       - Thu  8 Jul 06:26:11 BST 2021
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Simple (at least for now) PERL tool to list DistroWatch's top 10 rated Linux
# distributions, by hits-per-day for the last six months. Basic functionality
# to start with.
#
# Features:
#
#TODO: Show the top 10 by default, with flags for a given range or all 100.
#TODO: Add flag to disable color, and for color, and try to detect TERM.
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   libwww-perl (>= 6.31-1)
#   perl (>= 5.22.1-9)
#------------------------------------------------------------------------------

require LWP::UserAgent;

use v5.22.1;
use strict;
use warnings;
use LWP::UserAgent;

my $CurVer = '2021-07-08';
my $Progrm = ($0 =~ m{(?:.*/)?([^/].*)})[0];

sub Usage {
	print(qq{Usage: $Progrm [OPTS]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -C, --no-color           - Disable ANSI color escape sequences.
		  -t, --total              - Display the total number of hits.
	} =~ tr/\t//dr)
}

my $Domain = 'https://distrowatch.com';

my $Green = "\e[92m";
my $Grey = "\e[37m";
my $Red = "\e[91m";
my $Yellow = "\e[93m";
my $Reset = "\e[0m";

my $Color = 1;
my $Total = 0;
while (defined($ARGV[0])) {
	if ($ARGV[0] =~ '^(--help|-h)$') {
		Usage(); exit(0)
	} elsif ($ARGV[0] =~ '^(--version|-v)$') {
		print("$CurVer\n"); exit(0)
	} elsif ($ARGV[0] =~ '^(--no-color|-C)$') {
		$Color = 0;

		$Green = '';
		$Grey = '';
		$Red = '';
		$Yellow = '';
		$Reset = '';
	} elsif ($ARGV[0] =~ '^(--total|-t)$') {
		$Total = 1
	} else {
		die("Incorrect option(s) specified")
	}

	shift()
}

#----------------------------------------------------------Fetch and Parse Data

my $UA = LWP::UserAgent->new(
	'ua' => 'Mozilla/5.0',
	'protocols_allowed' => ['http', 'https'],
	'max_redirect' => 3,
	'timeout' => 5
);

my $Response = $UA->get($Domain);
$Response->is_success() or die("$!");

my $HitsTTL = 0;
my $HitsLenMax = 0;
my ($HitsLen, $Rank, $Name, $Hits, %Entries);
foreach (split("\n", $Response->decoded_content())) {
	chomp();

	if (/^[[:space:]]+<th class="phr1">([[:digit:]]+)</) {
		$Rank = $1
	} elsif (/^[[:space:]]+<td class="phr2"><a href=".*">(.*)<\/a>/) {
		$Name = $1
	} elsif (/^[[:space:]]+<td class="phr3" title="Yesterday: ([[:digit:]]+)">([[:digit:]]+)</) {
		$Entries{$Rank} = [$Name, $2, $1];
		$HitsTTL += $1
	}
}

$Rank = '';

#------------------------------------------------------------------Display Data

my @Keys = keys(%Entries);

unless (scalar(@Keys)) {
	print(STDERR "Uh-oh! No rankings found.\n");
	exit(1)
}

print("HPD in the Last 6 Months:\n\n");

my $PercentLenMax = 0;
foreach (sort({$a <=> $b} @Keys)) {
	if ($Color) {
		if ($_ > 10) {
			last()
		} elsif ($_ <= 3 and $_ >= 1) {
			$Rank = "\e[92m"
		} elsif ($_ <= 7 and $_ > 3) {
			$Rank = "\e[93m"
		} elsif ($_ <= 10 and $_ > 7) {
			$Rank = "\e[91m"
		}
	} else {
		$_ > 10 and last()
	}

	$HitsLen = length($Entries{$_}->[1]);
	$HitsLen > $HitsLenMax and $HitsLenMax = $HitsLen;

	my $UpDown = '?';
	if ($Entries{$_}->[1] > $Entries{$_}->[2]) {
		$UpDown = '>'
	} elsif ($Entries{$_}->[1] < $Entries{$_}->[2]) {
		$UpDown = '<'
	} elsif ($Entries{$_}->[1] == $Entries{$_}->[2]) {
		$UpDown = '='
	}

	my $Percent = sprintf("%3.2f%%", ($Entries{$_}->[1] / $HitsTTL) * 100);

	my $PercentLen = length($Percent);
	$PercentLen > $PercentLenMax and $PercentLenMax = $PercentLen;

	printf(
		$Rank . "%#2d " . $Grey . "%*d %*s %s" . $Reset . " %s\n", $_,
		$HitsLenMax, $Entries{$_}->[1], $PercentLenMax, $Percent,
		$UpDown, $Entries{$_}->[0]
	)
}

print("\nTotal: $HitsTTL\n") if $Total
