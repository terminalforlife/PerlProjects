#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/gub
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/gub
# Started On        - Mon 16 Mar 03:18:44 GMT 2020
# Last Change       - Thu 26 Nov 05:08:22 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Administrative utility to [g]rab various [b]its of [u]ser information. This
# is still more or less skeletal. I'd like to add more features to this, as it
# is kind of bland right now, but as it is, I can see it being somewhat useful.
#
# I have to admit, I did sort of just throw this together, but hey, it works!
#
# Features:
#
#TODO: Add check for password expiration.
#TODO: Add man page for GUB.
#TODO: Approach HOME usage without du(1) command.
#TODO: Tidy up the file and/or directory checks.
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   perl (>= 5.26.1)
#------------------------------------------------------------------------------

use strict;
use warnings;
use autodie;

no warnings 'uninitialized';

my $CurVer = '2020-11-26';
my $Progrm = 'gub';

sub Usage {
	print(qq{Usage: $Progrm [OPTS] [USER]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -p, --parseable          - Show more parseable text.
	} =~ tr/\t//dr)
}

my $Parseable;

my $BashAliases = '<N/A>';          my $BashFunctions = '<N/A>';
my $BashHistory = '<N/A>';          my $BashRC = '<N/A>';
my $DeadLetter = '<N/A>';           my $EGID = '<N/A>';
my $EUID = '<N/A>';                 my $GID = '<N/A>';
my $HomeDir = '<N/A>';              my $HomeGroup = '<N/A>';
my $HomeMode = '<N/A>';             my $HomeOwner = '<N/A>';
my $HomeSize = '<N/A>';             my $Name = '<N/A>';
my $Profile = '<N/A>';              my $SAAS = '<N/A>';
my $SSHDir = '<N/A>';               my $Shell = '<N/A>';
my $UID = '<N/A>';                  my $XAuthority = '<N/A>';
my $XSessionErrs = '<N/A>';

while (defined($ARGV[0])) {
	if ($ARGV[0] =~ '^(--help|-h)$') {
		Usage(); exit(0)
	} elsif ($ARGV[0] =~ '^(--version|-v)$') {
		print("$CurVer\n"); exit(0)
	} elsif ($ARGV[0] =~ '^(--parseable|-p)$') {
		$Parseable = 'true'
	} elsif ($ARGV[0] =~ '^-') {
		die('Incorrect option(s) specified')
	} else {
		last
	}

	shift()
}

die('Missing USER argument') unless length($ARGV[0]) > 0;
die('Only one user at a time is valid') unless @ARGV == 1;

my $Target = $ARGV[0];
my $PwdFile = '/etc/passwd';

open(my $FH, '<', $PwdFile);

my $Found;
while (<$FH>) {
	chomp(my @Line = split(':'));

	if ($Line[0] eq $Target) {
		$Found = 'true';

		$UID = $Line[2];
		$GID = $Line[3];
		$HomeDir = $Line[5];
		$Shell = $Line[6];
		$Name = (split(',', $Line[4]))[0];
	}
}

close($FH);

die('Unable to find USER') unless $Found eq 'true';

my ($HomeModeRaw, $HomeOwnerRaw, $HomeGroupRaw) = (stat($HomeDir))[2,4,5];
$HomeMode = $HomeModeRaw unless length($HomeModeRaw) == 0;
$HomeOwner = $HomeOwnerRaw unless length($HomeOwnerRaw) == 0;
$HomeGroup = $HomeGroupRaw unless length($HomeGroupRaw) == 0;

$HomeMode = sprintf('%04o', $HomeMode & 07777);

if (-x $HomeDir) {
	chomp($HomeSize = (split(' ', `du -sh '$HomeDir' 2> /dev/null`))[0]);

	if (-f "$HomeDir/.bash_functions") {
		$BashFunctions = 'true'
	} else {
		$BashFunctions = 'false'
	}

	if (-f "$HomeDir/.bash_history") {
		$BashHistory = 'true'
	} else {
		$BashHistory = 'false'
	}

	if (-f "$HomeDir/.bash_aliases") {
		$BashAliases = 'true'
	} else {
		$BashAliases = 'false'
	}

	if (-f "$HomeDir/.profile") {
		$Profile = 'true'
	} else {
		$Profile = 'false'
	}

	if (-f "$HomeDir/.bashrc") {
		$BashRC = 'true'
	} else {
		$BashRC = 'false'
	}

	if (-f "$HomeDir/.sudo_as_admin_successful") {
		$SAAS = 'true'
	} else {
		$SAAS = 'false'
	}

	if (-f "$HomeDir/.xsession-errors") {
		$XSessionErrs = 'true'
	} else {
		$XSessionErrs = 'false'
	}

	if (-f "$HomeDir/.Xauthority") {
		$XAuthority = 'true'
	} else {
		$XAuthority = 'false'
	}

	if (-f "$HomeDir/dead.letter") {
		$DeadLetter = 'true'
	} else {
		$DeadLetter = 'false'
	}

	if (-d "$HomeDir/.ssh") {
		$SSHDir = 'true'
	} else {
		$SSHDir = 'false'
	}
}

unless ($Parseable eq 'true') {
	print(qq{      Target User: $Target
	        Full Name: $Name

	     Real User ID: $UID
	    Real Group ID: $GID

	            Shell: $Shell

	         Home Dir: $HomeDir
	        Home Mode: $HomeMode
	        Home Size: $HomeSize
	       Home Group: $HomeGroup
	       Home Owner: $HomeOwner

	          Bash RC: $BashRC
	          Profile: $Profile
	     Bash Aliases: $BashAliases
	     Bash History: $BashHistory
	   Bash Functions: $BashFunctions

	          SSH Dir: $SSHDir
	      Dead Letter: $DeadLetter
	      X Authority: $XAuthority
	    Sudo as Admin: $SAAS
	 X Session Errors: $XSessionErrs
	} =~ tr/\t//dr)
} else {
	print(qq{Target_User=$Target
		Full_Name=$Name
		Real_User_ID=$UID
		Real_Group_ID=$GID
		Shell=$Shell
		Home_Dir=$HomeDir
		Home_Mode=$HomeMode
		Home_Size=$HomeSize
		Home_Group=$HomeGroup
		Home_Owner=$HomeOwner
		Bash_RC=$BashRC
		Profile=$Profile
		Bash_Aliases=$BashAliases
		Bash_History=$BashHistory
		Bash_Functions=$BashFunctions
		SSH_Dir=$SSHDir
		Dead_Letter=$DeadLetter
		X_Authority=$XAuthority
		Sudo_as_Admin=$SAAS
		X_Session_Errors=$XSessionErrs
	} =~ tr/\t//dr)
}
