#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/previewer
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/previewer/previewer
# Started On        - Mon 22 Apr 01:30:36 BST 2019
# Last Change       - Thu 13 Jan 21:09:34 GMT 2022
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Features:
#
# N/A
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   libterm-readkey-perl (>= 2.33-1build1)
#   libtext-wrapi18n-perl (>= 0.06-7.1)
#   libwww-perl (>= 6.15-1)
#   perl (>= 5.26.1)
#------------------------------------------------------------------------------

require LWP::UserAgent;
require Term::ReadKey;

use v5.22.1;
use strict;
use warnings;
use autodie;
use Text::Wrap;
use LWP::UserAgent;
use Term::ReadKey 'GetTerminalSize';

my $CurVer = '2022-01-13';
my $Progrm = 'previewer';

sub Usage {
	print(qq{Usage: $Progrm [OPTS] PACKAGE RATING

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  --db-file PATH           - Instead, use this database file.
		  --db-update              - Download and update the database.
		  --no-reviews             - Omit the review text from the output.
		  -a, --show-all           - Show all reviews, regardless of rating.
		  -r, --raw                - Display as it is in the database.
		  -s, --summary            - Conclude the reviews with a summary.
		  -u, --user NAME          - Only show review(s) by NAME user.

		  Although $Progrm uses Linux Mint's review and rating database, it
		  can still prove useful in Debian- and Ubuntu-based installations.

		  If you specifiy your own database file, it must adhere to the same
		  formatting as the official one, lest $Progrm wind up a buggy mess.

		  For example:

		    PKG~~~ID~~~USER~~~RATING~~~REVIEW

		  Each field must be separated by three tildes, without any quotes.

		  An exit status of 2 will be given, if no reviews are found.
	} =~ tr/\t//dr)
}

my $IfUser = '';
my $Argless = 0;
my $ShowAll = 0;
my $UpdateDB = 0;
my $ShowStats = 0;
my $NoReviews = 0;
my $DoRaw = 0;
my $Stats = 0;
my $Database = "$ENV{HOME}/.config/reviewer.db";
my $DBSite = 'https://community.linuxmint.com/data/reviews.list';

while (defined($ARGV[0])) {
	if ($ARGV[0] =~ '^(--help|-h)$') {
		Usage(); exit(0)
	} elsif ($ARGV[0] =~ '^(--version|-v)$') {
		print("$CurVer\n"); exit(0)
	} elsif ($ARGV[0] =~ '^(--summary|-s)$') {
		$ShowStats = 1
	} elsif ($ARGV[0] =~ '^(--show-all|-a)$') {
		$ShowAll = 1
	} elsif ($ARGV[0] =~ '^--db-update$') {
		$UpdateDB = 1
	} elsif ($ARGV[0] =~ '^--db-file$') {
		shift(@ARGV);

		die('No database file specified') unless $ARGV[0];

		$Database = $ARGV[0]
	} elsif ($ARGV[0] =~ '^(--user|-u)$') {
		shift(@ARGV);

		die('No user specified') unless $ARGV[0];

		$IfUser = $ARGV[0]
	} elsif ($ARGV[0] =~ '^--no-reviews$') {
		$NoReviews = 1
	} elsif ($ARGV[0] =~ '^(--raw|-r)$') {
		$DoRaw = 1
	} elsif ($ARGV[0] =~ '^-') {
		die("Incorrect option(s) specified")
	} else {
		last
	}

	shift()
}

$Argless = 1 unless defined($ARGV[0]) and defined($ARGV[1]);

unless ($UpdateDB or $IfUser or ($ShowAll and $Argless)) {
	($ShowAll and length($ARGV[0]) != 0) and die('Missing package name');

	if ($ARGV[1]) {
		if ($ShowAll and $ARGV[1] !~ /^[1-5]{1}$/) {
			die('Invalid rating provided')
		} elsif ($ShowAll) {
			die('Told to show all, but provided a rating')
		}
	} else {
		if (not $ShowAll and not $Stats) {
			die('A rating is by default required')
		}
	}
}

if ($UpdateDB) {
	open(my $FH, '>', $Database);

	my $UA = LWP::UserAgent->new(
		'agent' => 'Mozilla/5.0',
		'protocols_allowed' => ['http', 'https'],
		'max_redirects' => 1,
		'timeout' => 10
	);

	my $BufferFER = $UA->get($DBSite)->decoded_content;
	print($FH $BufferFER);

	close($FH);

	exit(0)
}

$Text::Wrap::columns = (GetTerminalSize)[0];

-f $Database or die('Database missing');

open(my $FH, '<', $Database);
my @FileData = <$FH>;
close($FH);

my %Ratings; # <-- Hash of each rating, for later incrementing, set below.
$Ratings{$_} = 0 foreach 1..5;
my $TotalCount = 0; # <-- TTL comments by user, or for a package.
my $Count = 0; # <-- TTL comments displayed by user, or for a package.

sub IncVars { # <-- $Rate is passed here.
	foreach (1..5) {
		$Ratings{$_}++ if $_[0] == $_
	}
}

sub Format { # <-- Arguments are typically $Said, $Rate, then $User.
	if ($DoRaw) {
		unless ($NoReviews) {
			print($_);
		} else {
			my @TEMP = split('~~~', $_);
			print("$TEMP[0]~~~$TEMP[1]~~~$TEMP[2]~~~$TEMP[3]~~~\n");
		}

		return(0)
	}

	if ($NoReviews) {
		printf("%d/5 ('%s')\n", $_[1], $_[2])
	} else {
		printf(
			"%d/5 ('%s')\n\n%s \n",
			$_[1], $_[2], wrap("  ", "  ", $_[0])
		)
	}
}

my (%Users, %IDs);
my $PackOld;
foreach (@FileData) {
	my @CurLine = split('~~~');

	my $Pack = $CurLine[0];
	my $RvID = $CurLine[1];
	my $User = $CurLine[2];
	my $Rate = $CurLine[3];
	my $Said = $CurLine[4];

	$Users{$User} = 1;
	$IDs{$RvID} = 1;

	if (length($IfUser) > 0) { # <-- Go by users.
		if (not $ARGV[0]) {
			if ($IfUser eq $User) {
				$Count++;
				$TotalCount++;
				IncVars($Rate);
				print("\n > '$Pack'\n\n");
				Format($Said, $Rate, $User);
			}
		} elsif ($Pack eq $ARGV[0]) {
			if ($IfUser eq $User) {
				$Count++;
				$TotalCount++;
				IncVars($Rate);
				Format($Said, $Rate, $User);
			}
		}
	} elsif ($ARGV[0]) { # <-- Go by packages.
		if ($Pack eq $ARGV[0]) {
			$TotalCount++;
			IncVars($Rate);

			if ($ShowAll) {
				$Count++;
				Format($Said, $Rate, $User)
			} elsif ($ARGV[1] and $Rate == $ARGV[1]) {
				$Count++;
				Format($Said, $Rate, $User)
			}
		}
	} elsif ($ShowAll and $Argless) { # <-- Just show all reviews.
		$Count++;
		$TotalCount++;
		IncVars($Rate);

		# Ensure print isn't unnecessarily repeated.
		if ($PackOld and $PackOld ne $Pack) {
			print("\n > '$Pack'\n\n");
		} elsif (not $PackOld) {
			print("\n > '$Pack'\n\n");
		}

		# When these aren't the same, next time, show what it is.
		$PackOld = $Pack;

		Format($Said, $Rate, $User)
	}
}

if ($Stats) {
	print('Reviews        ' . scalar(%IDs) . "\n");
	print('Users          ' . scalar(%Users) . "\n");

	exit(0)
}

if ($Count == 0) {
	print(STDERR "Uh-oh! ...no reviews were found.\n");
	exit(2)
}

if ($ShowStats) {
	my $Buffer = qq{
		Showed $Count review(s) of $TotalCount made by @{[scalar(%Users)]} users.

		Total 5/5:   $Ratings{5}
		Total 4/5:   $Ratings{4}
		Total 3/5:   $Ratings{3}
		Total 2/5:   $Ratings{2}
		Total 1/5:   $Ratings{1}

	};

	print($Buffer =~ tr/\t//dr)
}
