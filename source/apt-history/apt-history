#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/apt-history
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/apt-history
# Started On        - Sat 21 Nov 16:11:20 GMT 2020
# Last Change       - Mon 11 Apr 02:25:27 BST 2022
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Features:
#
#TODO: Allow apt-history to use X-number of older log files, using GZIP.
#TODO: Provide package listing output suitable for piping.
#TODO: When filtering for users, have option to show only 'System ...' entries.
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   libterm-readkey-perl (>= 2.33-1build1)
#   libtext-wrapi18n-perl (>= 0.06-7.1)
#   perl (>= 5.10)
#------------------------------------------------------------------------------

require Term::ANSIColor;
require Term::ReadKey;
require Text::Wrap;
require Time::Piece;
require APTHistory;

use feature 'say';
use strict;
use warnings;

no warnings 'uninitialized';

use constant VERSION => '2022-04-11';
use constant PROGRAM => 'apt-history';

sub Usage() {
	print(qq{Usage: ${\PROGRAM} [OPTS]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  --margin INT             - Set margin for event information to INT.
		  --no-color-status        - Don't show packages not installed in red.
		  -A, --action TYPE        - Filter action by TYPE. See below.
		  -C, --no-color           - Disable ANSII color escape sequences.
		  -D, --display STYLE      - Display packages in STYLE. See below.
		  -H, --history FILE       - Use an alternative 'history.log' file.
		  -U, --user-id UID        - Filter the logged results by UID.
		  -c, --command            - Also show the actual command executed.
		  -p, --package PKG        - Show results affecting only PKG.
		  -r, --reverse            - Display history in reverse; oldest first.
		  -u, --user USER          - Filter the logged results by USER.

		  Available package listing STYLEs are 'OneLine' and 'Wrapped'.
		  Available TYPEs are 'Install', 'Purge', 'Remove', and 'Upgrade'.

		  If color is enabled, packages in red are no longer installed.
	} =~ tr/\t//dr)
}

my $Margin = 4;
my $PKGStyle = 'OneLine';

my (
	$Date, $Time, $Command, $ReqByUser, $ReqByUID, $Action, $FilterWithArch,
	$Packages, $DoReverse, $ActionString, $DoCommand, $NoColor, $C_Command,
	$C_Arch, $C_Reset, $C_FancyDateTime, $C_Action, $OnlyAction, $FilterUser,
	$FilterUID, $FilterPKG, $C_Name, $NoColorStatus, $HistFile
);

my ($ArgFilterUID, $ArgFilterUser);
while (defined($ARGV[0])) {
	if ($ARGV[0] =~ '^(--help|-h)$') {
		Usage(); exit(0)
	} elsif ($ARGV[0] =~ '^(--version|-v)$') {
		say(VERSION); exit(0)
	} elsif ($ARGV[0] =~ '^(--history|-H)$') {
		shift();

		unless (length($ARGV[0])) {
			die("Err: Alternative 'history.log' FILE not provided.\n")
		} else {
			$HistFile = $ARGV[0]
		}
	} elsif ($ARGV[0] =~ '^(--package|-p)$') {
		shift();

		if (length($ARGV[0])) {
			die("Err: Filter package PKG not provided.\n")
		} else {
			$FilterWithArch = 1 if $ARGV[0] =~ /:.*$/;
			$FilterPKG = $ARGV[0]
		}
	} elsif ($ARGV[0] =~ '^(--display|-D)$') {
		shift();

		unless (length($ARGV[0])) {
			die("Err: Package display STYLE not provided.\n")
		} elsif ($ARGV[0] !~ '^(OneLine|Wrapped)$') {
			die("Err: Invalid package display STYLE provided.\n")
		} else {
			$PKGStyle = $ARGV[0]
		}
	} elsif ($ARGV[0] =~ '^(--action|-A)$') {
		shift();

		unless (length($ARGV[0])) {
			die("Err: No execution action TYPE provided.\n")
		} elsif ($ARGV[0] !~ '^(Install|Remove|Upgrade|Purge)$') {
			die("Err: Invalid execution action TYPE provided.\n")
		} else {
			$OnlyAction = $ARGV[0]
		}
	} elsif ($ARGV[0] =~ '^(--user|-u)$') {
		shift();

		unless (length($ARGV[0])) {
			die("Err: No USER specified for filtering.\n")
		} else {
			$ArgFilterUser = $1;
			$FilterUser = $ARGV[0]
		}
	} elsif ($ARGV[0] =~ '^(--user-id|-U)$') {
		shift();

		$ArgFilterUID = $1;
		unless (length($ARGV[0])) {
			die("Err: No UID specified for filtering.\n")
		} elsif ($ARGV[0] !~ '^[0-9]*$') {
			die("Err: Invalid UID provided\n")
		} else {
			$FilterUID = $ARGV[0]
		}
	} elsif ($ARGV[0] =~ '^(--reverse|-r)$') {
		$DoReverse = 1
	} elsif ($ARGV[0] =~ '^--no-color-status$') {
		$NoColorStatus = 1
	} elsif ($ARGV[0] =~ '^(--command|-c)$') {
		$DoCommand = 1
	} elsif ($ARGV[0] =~ '^(--no-color|-C)$') {
		$NoColor = 1
	} elsif ($ARGV[0] eq '--margin') {
		unless (length($ARGV[1])) {
			die("Err: OPT '$ARGV[0]' requires an argument.\n")
		} elsif ($ARGV[1] !~ /^\d+$/a) {
			die("Err: Invalid argument for '$ARGV[0]' OPT.\n")
		} else {
			# To maintain sane and readable output, but gives the user some
			# control over a preferred margin, such as 4 or 8; 4 is default.
			die("Err: Argument for '$ARGV[0]' OPT out of range.\n")
				if $ARGV[1] > 8;

			$Margin = $ARGV[1];
			shift()
		}
	} elsif ($ARGV[0] =~ '^-') {
		die("Err: Incorrect option(s) specified.\n")
	} else {
		last()
	}

	shift()
}

if (length($FilterUID) and length($FilterUser)) {
	die("Err: OPTs '$ArgFilterUID' and '$ArgFilterUser' specified.\n")
}

#-------------------------------------------------Gather History & Package Data

my $APTHistory = APTHistory->new();

my %History = $APTHistory->history('/var/log/apt/history.log');
my @InstalledPKGs = $APTHistory->packages('/var/lib/dpkg/status');

#-------------------------------------------------------------Use Gathered Data

use Term::ANSIColor 'colorstrip', 'color';
use Term::ReadKey 'GetTerminalSize';
use Text::Wrap 'wrap';
use Time::Piece;

unless ($NoColor) {
	$C_Action = color('bright_yellow');
	$C_Arch = color('bright_black');
	$C_Command = color('bright_black');
	$C_FancyDateTime = color('bright_green');
	$C_Name = color('bright_red');
	$C_Reset = color('reset')
}

my @SortedKeys;
if ($DoReverse) {
	@SortedKeys = sort({$a cmp $b} keys(%History))
} else {
	@SortedKeys = sort({$b cmp $a} keys(%History))
}

# This is normal, when the logs rotate, but the user might think something was
# wrong; came across this myself and was really confused!
unless (@SortedKeys) {
	say(STDERR 'No APT log entries found -- nothing to do.');
	exit(0) # <-- Cleaner; no need to keep going if we're here.
}

$Text::Wrap::columns = (GetTerminalSize())[0] - 1;

my $Count;
foreach my $Key (@SortedKeys) {
	my $FancyDateTime = Time::Piece->strptime(
		"$History{$Key}{'Date'} $History{$Key}{'Time'}", '%Y-%m-%d %H:%M:%S'
		#     Using just '%X' doesn't seem to work in Pop! OS 20.04. --^
	);

	if (length($FilterUser)) {
		$FilterUser eq $History{$Key}{'ReqByUser'} or next()
	} elsif (length($FilterUID)) {
		$FilterUID eq $History{$Key}{'ReqByUID'} or next()
	}

	if (length($OnlyAction)) {
		$OnlyAction eq $History{$Key}{'Action'} or next()
	}

	# For pretty-printing the correct verb.
	if ($History{$Key}{'Action'} eq 'Install') {
		$ActionString = "${C_Action}installed$C_Reset"
	} elsif ($History{$Key}{'Action'} eq 'Remove') {
		$ActionString = "${C_Action}removed$C_Reset"
	} elsif ($History{$Key}{'Action'} eq 'Purge') {
		$ActionString = "${C_Action}purged$C_Reset"
	} elsif ($History{$Key}{'Action'} eq 'Upgrade') {
		$ActionString = "${C_Action}upgraded$C_Reset"
	}

	# Populate array with just the current package names.
	my @Packages;
	foreach my $PKG (sort({$a cmp $b} split(' ', $History{$Key}{'Packages'}))) {
		unless ($PKG =~ /[\(\),]/) {
			my ($Name, $Arch) = split(':', $PKG);

			# If package is not currently installed, change its color to red.
			unless ($NoColor eq 'True' or $NoColorStatus eq 'True') {
				$Name = "$C_Name$Name$C_Reset"
					unless grep({$_ eq $PKG} @InstalledPKGs)
			}

			$Arch = "$C_Arch:$Arch$C_Reset";
			push(@Packages, "$Name$Arch")
		}
	}

	# Need to strip ANSI escape sequences otherwise grep() is borked.
	if (length($FilterPKG)) {
		if ($FilterWithArch) {
			next() unless grep({colorstrip($_) =~ /^$FilterPKG$/} @Packages)
		} else {
			next() unless grep({colorstrip($_) =~ /^$FilterPKG:.*$/} @Packages)
		}
	}

	#---------------------------------------------------------Begin Main Output

	my $Pad = ' ' x $Margin;

	# Once filtering is all done, see how many entries were found. We just need
	# this, to discover if nothing was found under the filters used or not.
	$Count++;

	say("$C_FancyDateTime$FancyDateTime$C_Reset\n");

	if ($DoCommand) {
		# To denote that it's a newline, as it would be on the command-line.
		$Text::Wrap::separator = " \\\n";

		my $Command = "$C_Command$History{$Key}{Command}$C_Reset\n\n";
		say(wrap($Pad, $Pad, $Command));

		# Restore it to a standard newline, for the rest of apt-history.
		$Text::Wrap::separator = "\n"
	}

	if (length($History{$Key}{'ReqByUser'})) {
		printf(
			"%sUser '%s' (%d) %s the following:\n", $Pad,
			$History{$Key}{'ReqByUser'},
			$History{$Key}{'ReqByUID'},
			$ActionString
		)
	} else {
		say("${Pad}System $ActionString the following:");
	}

	print("\n");
	if ($PKGStyle eq 'OneLine') { # <-- Default.
		map(say("$Pad$_"), @Packages)
	} elsif ($PKGStyle eq 'Wrapped') {
		print(wrap("$Pad", "$Pad", join(' ', @Packages)) . "\n")
	}

	print("\n")
}

say(STDERR 'No APT log entries found with given filters.') unless $Count;
