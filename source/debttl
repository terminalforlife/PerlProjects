#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/debttl
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/debttl
# Started On        - Tue  5 Apr 00:19:48 BST 2022
# Last Change       - Sun 10 Apr 23:33:41 BST 2022
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Output the total size of installed Debian packages. This is a simple tool, -
# but it's useful for Conky users and those who want to add this value to their
# tiling window manager status bar, for example. Only PERL is required.
#------------------------------------------------------------------------------
# Features:
#
# N/A
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   perl (>= 5.26.1)
#------------------------------------------------------------------------------

use feature 'say';
use strict;
use warnings;

no warnings 'uninitialized';

use constant VERSION => '2022-04-10';
use constant PROGRAM => 'debttl';

sub Usage() {
	print(qq{Usage: ${\PROGRAM} [OPTS]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -f, --filter TYPE        - Display only a specific value.

		Valid TYPEs are 'ttl_pkgs', 'ii_size', and 'rc_size'.
	} =~ tr/\t//dr)
}

use constant FILE => '/var/lib/dpkg/status';

my $Divisor = 1024;

my $Filter;

while (defined($ARGV[0])) {
	if ($ARGV[0] =~ '^(--help|-h)$') {
		Usage(); exit(0)
	} elsif ($ARGV[0] =~ '^(--version|-v)$') {
		say(VERSION); exit(0)
	} elsif ($ARGV[0] =~ '^(--filter|-f)$') {
		unless (length($ARGV[1])) {
			die("Err: Option '$ARGV[0]' requires an argument.\n")
		} elsif ($ARGV[1] =~ '^(ttl_pkgs|ii_size|rc_size)$') {
			$Filter = $ARGV[1];
			shift()
		} else {
			die("Err: Option '$ARGV[0]' given invalid argument.\n")
		}
	} else {
		die("Err: Incorrect option(s) specified.\n")
	}

	shift()
}

#-----------------------------------------------------------Primary Subroutines

sub Commas($) {
	my $Str = reverse($_[0]);
	my $Out = $Str =~ s/(\d{3})/$1,/rg;
	if (substr($Out, -1, 1) eq ',') {
		my $Fixed = substr($Out, 0, -1);
		return(scalar(reverse($Fixed)))
	} else {
		return(scalar(reverse($Out)))
	}
}

sub Human($) {
	my $Size = $_[0];
	foreach my $Unit (qw{K M G T P E Y Z}) {
		if ($Size < $Divisor) {
			my $Float = sprintf('%.1f', $Size);
			if (substr($Float, -2) eq '.0') {
				return(substr($Float, 0, -2) . $Unit)
			} else {
				return($Float . $Unit)
			}
		}

		$Size = $Size / $Divisor
	}
}

#-----------------------------------------------------------Display Information

unless (-f FILE) {
	die("Err: File '${\FILE}' not found.\n")
} elsif (not -r FILE) {
	die("Err: File '${\FILE} unreadable.\n")
}

open(my $FH, '<', FILE) or die("$!");

my (@II_Sizes, @RC_Sizes, $PackageTTL);
while (<$FH>) {
	chomp(my @Line = split(':'));

	our $Status;
	if ($Line[0] eq 'Package') {
		$PackageTTL++;
	} elsif ($Line[0] eq 'Status') {
		$Status = substr($Line[1], 1);
	} elsif ($Line[0] eq 'Installed-Size') {
		if ($Status eq 'install ok installed') {
			push(@II_Sizes, substr($Line[1], 1))
		} elsif ($Status eq 'deinstall ok config-files') {
			push(@RC_Sizes, substr($Line[1], 1))
		}
	}
}

close($FH) or die("$!");

map(our $II_TTL += $_, @II_Sizes);
map(our $RC_TTL += $_, @RC_Sizes);

if ($Filter eq 'ttl_pkgs') {
	say(Commas(@II_Sizes))
} elsif ($Filter eq 'ii_size') {
	say(Human($II_TTL))
} elsif ($Filter eq 'rc_size') {
	say(Human($RC_TTL))
} else {
	say('Total Packages: ' . Commas(@II_Sizes));
	say('Installed Size: ' . Human($II_TTL));
	say(' Unpurged Size: ' . Human($RC_TTL))
}
